{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///react-grid-layout.min.js","webpack:///webpack/bootstrap 8bd0bfd5cbbb47e1cf1e","webpack:///./index-dev.js","webpack:///external \"React\"","webpack:///./lib/utils.js","webpack:///./lib/mixins/PureDeepRenderMixin.js","webpack:///./~/object-assign/index.js","webpack:///./~/react/lib/ReactComponentWithPureRenderMixin.js","webpack:///./~/react/lib/cloneWithProps.js","webpack:///./lib/ReactGridLayout.jsx","webpack:///./lib/mixins/WidthListeningMixin.js","webpack:///./~/react-resizable/build/Resizable.js","webpack:///./lib/GridItem.jsx","webpack:///./lib/ResponsiveReactGridLayout.jsx","webpack:///./lib/responsiveUtils.js","webpack:///./~/deep-equal/index.js","webpack:///./~/deep-equal/lib/is_arguments.js","webpack:///./~/deep-equal/lib/keys.js","webpack:///./~/react-draggable/lib/draggable.js","webpack:///./~/react-draggable/~/classnames/index.js","webpack:///./~/react-resizable/build/ResizableBox.js","webpack:///./~/react-resizable/index.js","webpack:///./~/react-resizable/~/react-draggable/lib/draggable.js","webpack:///./~/react/lib/emptyFunction.js","webpack:///./~/react/lib/shallowEqual.js","webpack:///./~/react-draggable/index.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","i","Object","prototype","hasOwnProperty","_m","args","slice","fn","a","b","apply","concat","Responsive","assign","utils","bottom","layout","bottomY","max","len","length","y","h","clone","obj","collides","l1","l2","x","w","compact","verticalCompact","compareWith","getStatics","out","sorted","sortLayoutItemsByRowCol","l","compactItem","push","indexOf","moved","getFirstCollision","correctBounds","bounds","collidesWith","cols","getLayoutItem","layoutItem","getAllCollisions","moveElement","isUserAction","movingUp","undefined","reverse","collisions","collision","moveElementAwayFromCollision","itemToMove","fakeItem","Math","perc","num","setTransform","style","coords","replace","transform","WebkitTransform","MozTransform","msTransform","OTransform","sort","synchronizeLayoutWithChildren","initialLayout","children","Array","isArray","child","exists","key","g","props","_grid","validateLayout","min","contextName","subProps","Error","j","deepEqual","PureDeepRenderMixin","shouldComponentUpdate","nextProps","nextState","state","ToObject","val","TypeError","target","source","from","keys","to","s","arguments","shallowEqual","ReactComponentWithPureRenderMixin","mergeProps","currentProps","childProps","newProps","extend","hasOwn","RESERVED","resolve","src","value","joinClasses","React","version","split","map","parseFloat","className","ref","MockLegacyFactory","constructor","ConvenienceConstructor","isReactLegacyFactory","type","createElement","_objectWithoutProperties","_extends","GridItem","WidthListeningMixin","ReactGridLayout","createClass","displayName","mixins","propTypes","autoSize","PropTypes","bool","number","draggableCancel","string","draggableHandle","propName","componentName","layouts","margin","array","rowHeight","isDraggable","isResizable","useCSSTransforms","onLayoutChange","func","onDragStart","onDrag","onDragStop","onResizeStart","onResize","onResizeStop","node","Children","forEach","list","getDefaultProps","getInitialState","activeDrag","isMounted","width","initialWidth","componentDidMount","setState","componentWillReceiveProps","onWidthChange","JSON","stringify","componentDidUpdate","prevProps","prevState","containerHeight","_ref","e","element","position","_ref2","oldL","placeholder","_ref3","_ref4","size","_ref5","_ref6","isPlaceholder","containerWidth","processGridItem","draggable","resizable","moveOnStartChange","cancel","handle","usePercentages","render","_props","height","listenToWindowResize","window","addEventListener","onWindowResize","componentWillUnmount","removeEventListener","getDOMNode","offsetWidth","calcWH","handleSize","left","top","parseConstraints","constraints","Draggable","PureRenderMixin","cloneWithProps","isRequired","draggableOpts","object","minConstraints","maxConstraints","resizeHandler","handlerName","me","start","onStop","onStart","constraintError","name","Resizable","minW","maxW","minH","maxH","Infinity","resizing","calcPosition","calcXY","round","floor","createStyle","pos","mixinDraggable","onDragHandler","mixinResizable","maxWidth","mins","maxes","onResizeHandler","_me$calcXY","_me$calcWH","join","responsiveUtils","ResponsiveReactGridLayout","breakpoint","breakpoints","k","onBreakpointChange","lg","md","sm","xs","xxs","getBreakpointFromWidth","getColsFromBreakpoint","findOrGenerateResponsiveLayout","newLayout","verticalLayout","newState","parse","sortBreakpoints","matching","breakpointName","lastBreakpoint","breakpointsSorted","breakpointsAbove","isUndefinedOrNull","isBuffer","copy","objEquiv","opts","isArguments","pSlice","ka","objectKeys","kb","actual","expected","Date","getTime","strict","supported","toString","unsupported","propertyIsEnumerable","supportsArgumentsClass","shim","createUIEvent","_pendingState","clientY","clientX","canDragY","axis","canDragX","isFunction","findInArray","callback","matchesSelector","el","selector","method","getControlPosition","touches","addEvent","event","handler","attachEvent","removeEvent","detachEvent","outerHeight","clientHeight","computedStyle","getComputedStyle","int","borderTopWidth","borderBottomWidth","outerWidth","clientWidth","borderLeftWidth","borderRightWidth","innerHeight","paddingTop","paddingBottom","innerWidth","paddingLeft","paddingRight","isNum","isNaN","parseInt","getBoundPosition","parent","parentNode","nodeStyle","parentStyle","offsetLeft","marginLeft","offsetTop","marginTop","right","snapToGrid","grid","pendingX","pendingY","addUserSelectStyles","enableUserSelectHack","document","body","getAttribute","setAttribute","userSelectStyle","removeUserSelectStyles","createCSSTransform","emptyFunction","classNames","eventsFor","touch","move","end","mouse","dragEventFor","oneOf","oneOfType","shape","Number","arrayOf","zIndex","onMouseDown","handleDrag","handleDragEnd","NaN","dragging","offsetX","offsetY","handleDragStart","shouldStart","dragPoint","shouldUpdate","ev","preventDefault","onTouchStart","resetState","childStyle","touchHacks","touchAction","react-draggable-dragging","react-draggable-dragged","dragged","cloneElement","only","onMouseUp","onTouchEnd","arg","classes","substr","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_slicedToArray","arr","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","lockAspectRatio","aspectRatio","widthChanged","heightChanged","_preserveAspectRatio","preserveAspectRatio","_preserveAspectRatio2","ResizableBox","positionToCSSTransform","isTouchDevice","startX","startY","button","directionX","directionY","abs","bind","makeEmptyFunction","thatReturns","thatReturnsFalse","thatReturnsTrue","thatReturnsNull","thatReturnsThis","thatReturnsArgument","objA","objB","__webpack_module_template_argument_0__"],"mappings":"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","file":"react-grid-layout.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"React\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"React\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactGridLayout\"] = factory(require(\"React\"));\n\telse\n\t\troot[\"ReactGridLayout\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"React\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"React\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactGridLayout\"] = factory(require(\"React\"));\n\telse\n\t\troot[\"ReactGridLayout\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ((function(modules) {\n\t// Check all modules for deduplicated modules\n\tfor(var i in modules) {\n\t\tif(Object.prototype.hasOwnProperty.call(modules, i)) {\n\t\t\tswitch(typeof modules[i]) {\n\t\t\tcase \"number\":\n\t\t\t\t// Module is a copy of another module\n\t\t\t\tmodules[i] = modules[modules[i]];\n\t\t\t\tbreak;\n\t\t\tcase \"object\":\n\t\t\t\t// Module can be created from a template\n\t\t\t\tmodules[i] = (function(_m) {\n\t\t\t\t\tvar args = _m.slice(1), fn = modules[_m[0]];\n\t\t\t\t\treturn function (a,b,c) {\n\t\t\t\t\t\tfn.apply(null, [a,b,c].concat(args));\n\t\t\t\t\t};\n\t\t\t\t}(modules[i]));\n\t\t\t}\n\t\t}\n\t}\n\treturn modules;\n}([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(7);\n\tmodule.exports.Responsive = __webpack_require__(11);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar assign = __webpack_require__(4);\n\t\n\tvar utils = module.exports = {\n\t\n\t  /**\n\t   * Return the bottom coordinate of the layout.\n\t   *\n\t   * @param  {Array} layout Layout array.\n\t   * @return {Number}       Bottom coordinate.\n\t   */\n\t  bottom: function bottom(layout) {\n\t    var max = 0,\n\t        bottomY;\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      bottomY = layout[i].y + layout[i].h;\n\t      if (bottomY > max) max = bottomY;\n\t    }\n\t    return max;\n\t  },\n\t\n\t  /**\n\t   * Clones a shallow object.\n\t   * @param  {Object} obj Object to clone.\n\t   * @return {Object}   Cloned object.\n\t   */\n\t  clone: function clone(obj) {\n\t    return assign({}, obj);\n\t  },\n\t\n\t  /**\n\t   * Given two layouts, check if they collide.\n\t   *\n\t   * @param  {Object} l1 Layout object.\n\t   * @param  {Object} l2 Layout object.\n\t   * @return {Boolean}   True if colliding.\n\t   */\n\t  collides: function collides(l1, l2) {\n\t    if (l1 === l2) return false; // same element\n\t    if (l1.x + l1.w <= l2.x) return false; // l1 is left of l2\n\t    if (l1.x >= l2.x + l2.w) return false; // l1 is right of l2\n\t    if (l1.y + l1.h <= l2.y) return false; // l1 is above l2\n\t    if (l1.y >= l2.y + l2.h) return false; // l1 is below l2\n\t    return true; // boxes overlap\n\t  },\n\t\n\t  /**\n\t   * Given a layout, compact it. This involves going down each y coordinate and removing gaps\n\t   * between items.\n\t   *\n\t   * @param  {Array} layout Layout.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}       Compacted Layout.\n\t   */\n\t  compact: function compact(layout, verticalCompact) {\n\t    // Statics go in the compareWith array right away so items flow around them.\n\t    var compareWith = utils.getStatics(layout),\n\t        out = [];\n\t    // We go through the items by row and column.\n\t    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\t\n\t    for (var i = 0, len = sorted.length; i < len; i++) {\n\t      var l = sorted[i];\n\t\n\t      // Don't move static elements\n\t      if (!l['static']) {\n\t        l = utils.compactItem(compareWith, l, verticalCompact);\n\t\n\t        // Add to comparison array. We only collide with items before this one.\n\t        // Statics are already in this array.\n\t        compareWith.push(l);\n\t      }\n\t\n\t      // Add to output array to make sure they still come out in the right order.\n\t      out[layout.indexOf(l)] = l;\n\t\n\t      // Clear moved flag, if it exists.\n\t      delete l.moved;\n\t    }\n\t\n\t    return out;\n\t  },\n\t\n\t  compactItem: function compactItem(compareWith, l, verticalCompact) {\n\t    if (verticalCompact) {\n\t      // Move the element up as far as it can go without colliding.\n\t      while (l.y > 0 && !utils.getFirstCollision(compareWith, l)) {\n\t        l.y--;\n\t      }\n\t    }\n\t\n\t    // Move it down, and keep moving it down if it's colliding.\n\t    var collides;\n\t    while (collides = utils.getFirstCollision(compareWith, l)) {\n\t      l.y = collides.y + collides.h;\n\t    }\n\t    return l;\n\t  },\n\t\n\t  /**\n\t   * Given a layout, make sure all elements fit within its bounds.\n\t   *\n\t   * @param  {Array} layout Layout array.\n\t   * @param  {Number} bounds Number of columns.\n\t   * @return {[type]}        [description]\n\t   */\n\t  correctBounds: function correctBounds(layout, bounds) {\n\t    var collidesWith = utils.getStatics(layout);\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      var l = layout[i];\n\t      // Overflows right\n\t      if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;\n\t      // Overflows left\n\t      if (l.x < 0) {\n\t        l.x = 0;\n\t        l.w = bounds.cols;\n\t      }\n\t      if (!l['static']) collidesWith.push(l);else {\n\t        // If this is static and collides with other statics, we must move it down.\n\t        // We have to do something nicer than just letting them overlap.\n\t        while (utils.getFirstCollision(collidesWith, l)) {\n\t          l.y++;\n\t        }\n\t      }\n\t    }\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * Get a layout item by ID. Used so we can override later on if necessary.\n\t   *\n\t   * @param  {Array}  layout Layout array.\n\t   * @param  {Number} id     ID\n\t   * @return {LayoutItem}    Item at ID.\n\t   */\n\t  getLayoutItem: function getLayoutItem(layout, id) {\n\t    id = '' + id;\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if ('' + layout[i].i === id) return layout[i];\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Returns the first item this layout collides with.\n\t   * It doesn't appear to matter which order we approach this from, although\n\t   * perhaps that is the wrong thing to do.\n\t   *\n\t   * @param  {Object} layoutItem Layout item.\n\t   * @return {Object|undefined}  A colliding layout item, or undefined.\n\t   */\n\t  getFirstCollision: function getFirstCollision(layout, layoutItem) {\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (utils.collides(layout[i], layoutItem)) return layout[i];\n\t    }\n\t  },\n\t\n\t  getAllCollisions: function getAllCollisions(layout, layoutItem) {\n\t    var out = [];\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (utils.collides(layout[i], layoutItem)) out.push(layout[i]);\n\t    }\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Get all static elements.\n\t   * @param  {Array} layout Array of layout objects.\n\t   * @return {Array}        Array of static layout items..\n\t   */\n\t  getStatics: function getStatics(layout) {\n\t    var out = [];\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (layout[i]['static']) out.push(layout[i]);\n\t    }\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Move an element. Responsible for doing cascading movements of other elements.\n\t   *\n\t   * @param  {Array}      layout Full layout to modify.\n\t   * @param  {LayoutItem} l      element to move.\n\t   * @param  {Number}     [x]    X position in grid units.\n\t   * @param  {Number}     [y]    Y position in grid units.\n\t   * @param  {Boolean}    [isUserAction] If true, designates that the item we're moving is\n\t   *                                     being dragged/resized by th euser.\n\t   */\n\t  moveElement: function moveElement(layout, l, x, y, isUserAction) {\n\t    if (l['static']) return layout;\n\t\n\t    // Short-circuit if nothing to do.\n\t    if (l.y === y && l.x === x) return layout;\n\t\n\t    var movingUp = l.y > y;\n\t    // This is quite a bit faster than extending the object\n\t    if (x !== undefined) l.x = x;\n\t    if (y !== undefined) l.y = y;\n\t    l.moved = true;\n\t\n\t    // If this collides with anything, move it.\n\t    // When doing this comparison, we have to sort the items we compare with\n\t    // to ensure, in the case of multiple collisions, that we're getting the\n\t    // nearest collision.\n\t    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\t    if (movingUp) sorted = sorted.reverse();\n\t    var collisions = utils.getAllCollisions(sorted, l);\n\t\n\t    // Move each item that collides away from this element.\n\t    for (var i = 0, len = collisions.length; i < len; i++) {\n\t      var collision = collisions[i];\n\t      // console.log('resolving collision between', l.i, 'at', l.y, 'and', collision.i, 'at', collision.y);\n\t\n\t      // Short circuit so we can't infinite loop\n\t      if (collision.moved) continue;\n\t\n\t      // This makes it feel a bit more precise by waiting to swap for just a bit when moving up.\n\t      if (l.y > collision.y && l.y - collision.y > collision.h / 4) continue;\n\t\n\t      // Don't move static items - we have to move *this* element away\n\t      if (collision['static']) {\n\t        layout = utils.moveElementAwayFromCollision(layout, collision, l, isUserAction);\n\t      } else {\n\t        layout = utils.moveElementAwayFromCollision(layout, l, collision, isUserAction);\n\t      }\n\t    }\n\t\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * This is where the magic needs to happen - given a collision, move an element away from the collision.\n\t   * We attempt to move it up if there's room, otherwise it goes below.\n\t   *\n\t   * @param  {Array} layout            Full layout to modify.\n\t   * @param  {LayoutItem} collidesWith Layout item we're colliding with.\n\t   * @param  {LayoutItem} itemToMove   Layout item we're moving.\n\t   * @param  {Boolean} [isUserAction]  If true, designates that the item we're moving is being dragged/resized\n\t   *                                   by the user.\n\t   */\n\t  moveElementAwayFromCollision: function moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction) {\n\t\n\t    // If there is enough space above the collision to put this element, move it there.\n\t    // We only do this on the main collision as this can get funky in cascades and cause\n\t    // unwanted swapping behavior.\n\t    if (isUserAction) {\n\t      // Make a mock item so we don't modify the item here, only modify in moveElement.\n\t      var fakeItem = {\n\t        x: itemToMove.x,\n\t        y: itemToMove.y,\n\t        w: itemToMove.w,\n\t        h: itemToMove.h\n\t      };\n\t      fakeItem.y = Math.max(collidesWith.y - itemToMove.h, 0);\n\t      if (!utils.getFirstCollision(layout, fakeItem)) {\n\t        return utils.moveElement(layout, itemToMove, undefined, fakeItem.y);\n\t      }\n\t    }\n\t\n\t    // Previously this was optimized to move below the collision directly, but this can cause problems\n\t    // with cascading moves, as an item may actually leapflog a collision and cause a reversal in order.\n\t    return utils.moveElement(layout, itemToMove, undefined, itemToMove.y + 1);\n\t  },\n\t\n\t  /**\n\t   * Helper to convert a number to a percentage string.\n\t   *\n\t   * @param  {Number} num Any number\n\t   * @return {String}     That number as a percentage.\n\t   */\n\t  perc: function perc(num) {\n\t    return num * 100 + '%';\n\t  },\n\t\n\t  setTransform: function setTransform(style, coords) {\n\t    // Replace unitless items with px\n\t    var x = ('' + coords[0]).replace(/(\\d)$/, '$1px');\n\t    var y = ('' + coords[1]).replace(/(\\d)$/, '$1px');\n\t    style.transform = 'translate(' + x + ',' + y + ')';\n\t    style.WebkitTransform = 'translate(' + x + ',' + y + ')';\n\t    style.MozTransform = 'translate(' + x + ',' + y + ')';\n\t    style.msTransform = 'translate(' + x + ',' + y + ')';\n\t    style.OTransform = 'translate(' + x + ',' + y + ')';\n\t    return style;\n\t  },\n\t\n\t  /**\n\t   * Get layout items sorted from top left to right and down.\n\t   *\n\t   * @return {Array} Array of layout objects.\n\t   * @return {Array}        Layout, sorted static items first.\n\t   */\n\t  sortLayoutItemsByRowCol: function sortLayoutItemsByRowCol(layout) {\n\t    return [].concat(layout).sort(function (a, b) {\n\t      if (a.y > b.y || a.y === b.y && a.x > b.x) {\n\t        return 1;\n\t      }\n\t      return -1;\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Generate a layout using the initialLayout and children as a template.\n\t   * Missing entries will be added, extraneous ones will be truncated.\n\t   *\n\t   * @param  {Array}  initialLayout Layout passed in through props.\n\t   * @param  {String} breakpoint    Current responsive breakpoint.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}                Working layout.\n\t   */\n\t  synchronizeLayoutWithChildren: function synchronizeLayoutWithChildren(initialLayout, children, cols, verticalCompact) {\n\t    // ensure 'children' is always an array\n\t    if (!Array.isArray(children)) {\n\t      children = [children];\n\t    }\n\t    initialLayout = initialLayout || [];\n\t\n\t    // Generate one layout item per child.\n\t    var layout = [];\n\t    for (var i = 0, len = children.length; i < len; i++) {\n\t      var child = children[i];\n\t      // Don't overwrite if it already exists.\n\t      var exists = utils.getLayoutItem(initialLayout, child.key);\n\t      if (exists) {\n\t        // Ensure 'i' is always a string\n\t        exists.i = '' + exists.i;\n\t        layout.push(exists);\n\t        continue;\n\t      }\n\t      // New item: attempt to use a layout item from the child, if it exists.\n\t      var g = child.props._grid;\n\t      if (g) {\n\t        utils.validateLayout([g], 'ReactGridLayout.child');\n\t        // Validated; add it to the layout. Bottom 'y' possible is the bottom of the layout.\n\t        // This allows you to do nice stuff like specify {y: Infinity}\n\t        if (verticalCompact) {\n\t          layout.push(assign({}, g, { y: Math.min(utils.bottom(layout), g.y), i: child.key }));\n\t        } else {\n\t          layout.push(assign({}, g, { y: g.y, i: child.key }));\n\t        }\n\t      } else {\n\t        // Nothing provided: ensure this is added to the bottom\n\t        layout.push({ w: 1, h: 1, x: 0, y: utils.bottom(layout), i: child.key });\n\t      }\n\t    }\n\t\n\t    // Correct the layout.\n\t    layout = utils.correctBounds(layout, { cols: cols });\n\t    layout = utils.compact(layout, verticalCompact);\n\t\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * Validate a layout. Throws errors.\n\t   *\n\t   * @param  {Array}  layout        Array of layout items.\n\t   * @param  {String} [contextName] Context name for errors.\n\t   * @throw  {Error}                Validation error.\n\t   */\n\t  validateLayout: function validateLayout(layout, contextName) {\n\t    contextName = contextName || 'Layout';\n\t    var subProps = ['x', 'y', 'w', 'h'];\n\t    if (!Array.isArray(layout)) throw new Error(contextName + ' must be an array!');\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      for (var j = 0; j < subProps.length; j++) {\n\t        if (typeof layout[i][subProps[j]] !== 'number') {\n\t          throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].' + subProps[j] + ' must be a Number!');\n\t        }\n\t      }\n\t      if (layout[i]['static'] !== undefined && typeof layout[i]['static'] !== 'boolean') {\n\t        throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].static must be a Boolean!');\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar deepEqual = __webpack_require__(13);\n\t\n\t// Like PureRenderMixin, but with deep comparisons.\n\tvar PureDeepRenderMixin = {\n\t  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\n\t    return !deepEqual(this.props, nextProps) || !deepEqual(this.state, nextState);\n\t  }\n\t};\n\t\n\tmodule.exports = PureDeepRenderMixin;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tfunction ToObject(val) {\n\t\tif (val == null) {\n\t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t\t}\n\t\n\t\treturn Object(val);\n\t}\n\t\n\tmodule.exports = Object.assign || function (target, source) {\n\t\tvar from;\n\t\tvar keys;\n\t\tvar to = ToObject(target);\n\t\n\t\tfor (var s = 1; s < arguments.length; s++) {\n\t\t\tfrom = arguments[s];\n\t\t\tkeys = Object.keys(Object(from));\n\t\n\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\tto[keys[i]] = from[keys[i]];\n\t\t\t}\n\t\t}\n\t\n\t\treturn to;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t* @providesModule ReactComponentWithPureRenderMixin\n\t*/\n\t\n\t'use strict';\n\t\n\tvar shallowEqual = __webpack_require__(24);\n\t\n\t/**\n\t * If your React component's render function is \"pure\", e.g. it will render the\n\t * same result given the same props and state, provide this Mixin for a\n\t * considerable performance boost.\n\t *\n\t * Most React components have pure render functions.\n\t *\n\t * Example:\n\t *\n\t *   var ReactComponentWithPureRenderMixin =\n\t *     require('ReactComponentWithPureRenderMixin');\n\t *   React.createClass({\n\t *     mixins: [ReactComponentWithPureRenderMixin],\n\t *\n\t *     render: function() {\n\t *       return <div className={this.props.className}>foo</div>;\n\t *     }\n\t *   });\n\t *\n\t * Note: This only checks shallow equality for props and state. If these contain\n\t * complex data structures this mixin may have false-negatives for deeper\n\t * differences. Only mixin to components which have simple props and state, or\n\t * use `forceUpdate()` when you know deep data structures have changed.\n\t */\n\tvar ReactComponentWithPureRenderMixin = {\n\t  shouldComponentUpdate: function(nextProps, nextState) {\n\t    return !shallowEqual(this.props, nextProps) ||\n\t           !shallowEqual(this.state, nextState);\n\t  }\n\t};\n\t\n\tmodule.exports = ReactComponentWithPureRenderMixin;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\r\n\tvar React    = __webpack_require__(1)\r\n\t  , hasOwn   = Object.prototype.hasOwnProperty\r\n\t  , version  = React.version.split('.').map(parseFloat)\r\n\t  , RESERVED = {\r\n\t      className:  resolve(joinClasses),\r\n\t      children:   function(){},\r\n\t      key:        function(){},\r\n\t      ref:        function(){},\r\n\t      style:      resolve(extend)\r\n\t    };\r\n\t\r\n\tmodule.exports = function cloneWithProps(child, props) {\r\n\t  var newProps = mergeProps(props, child.props);\r\n\t\r\n\t  if (!hasOwn.call(newProps, 'children') && hasOwn.call(child.props, 'children'))\r\n\t    newProps.children = child.props.children;\r\n\t\r\n\t  // < 0.11\r\n\t  if (version[0] === 0 && version[1] < 11)\r\n\t    return child.constructor.ConvenienceConstructor(newProps);\r\n\t  \r\n\t  // 0.11\r\n\t  if (version[0] === 0 && version[1] === 11)\r\n\t    return child.constructor(newProps);\r\n\t\r\n\t  // 0.12\r\n\t  else if (version[0] === 0 && version[1] === 12){\r\n\t    MockLegacyFactory.isReactLegacyFactory = true\r\n\t    MockLegacyFactory.type = child.type\r\n\t    return React.createElement(MockLegacyFactory, newProps);\r\n\t  }\r\n\t\r\n\t  // 0.13+\r\n\t  return React.createElement(child.type, newProps);\r\n\t\r\n\t  function MockLegacyFactory(){}\r\n\t}\r\n\t\r\n\tfunction mergeProps(currentProps, childProps) {\r\n\t  var newProps = extend(currentProps), key\r\n\t\r\n\t  for (key in childProps) {\r\n\t    if (hasOwn.call(RESERVED, key) )\r\n\t      RESERVED[key](newProps, childProps[key], key)\r\n\t\r\n\t    else if ( !hasOwn.call(newProps, key) )\r\n\t      newProps[key] = childProps[key];\r\n\t  }\r\n\t  return newProps\r\n\t}\r\n\t\r\n\tfunction resolve(fn){\r\n\t  return function(src, value, key){\r\n\t    if( !hasOwn.call(src, key)) src[key] = value\r\n\t    else src[key] = fn(src[key], value)\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction joinClasses(a, b){\r\n\t  if ( !a ) return b || ''\r\n\t  return a + (b ? ' ' + b : '')\r\n\t}\r\n\t\r\n\tfunction extend() {\r\n\t  var target = {};\r\n\t  for (var i = 0; i < arguments.length; i++) \r\n\t    for (var key in arguments[i]) if (hasOwn.call(arguments[i], key)) \r\n\t      target[key] = arguments[i][key]   \r\n\t  return target\r\n\t}\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\t\n\tvar React = __webpack_require__(1);\n\tvar GridItem = __webpack_require__(10);\n\tvar utils = __webpack_require__(2);\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\tvar WidthListeningMixin = __webpack_require__(8);\n\t\n\t/**\n\t * A reactive, fluid grid layout with draggable, resizable components.\n\t */\n\tvar ReactGridLayout = React.createClass({\n\t  displayName: 'ReactGridLayout',\n\t\n\t  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\t\n\t  propTypes: {\n\t    //\n\t    // Basic props\n\t    //\n\t\n\t    // If true, the container height swells and contracts to fit contents\n\t    autoSize: React.PropTypes.bool,\n\t    // # of cols.\n\t    cols: React.PropTypes.number,\n\t\n\t    // A selector that will not be draggable.\n\t    draggableCancel: React.PropTypes.string,\n\t    // A selector for the draggable handler\n\t    draggableHandle: React.PropTypes.string,\n\t\n\t    // If true, the layout will compact vertically\n\t    verticalCompact: React.PropTypes.bool,\n\t\n\t    // layout is an array of object with the format:\n\t    // {x: Number, y: Number, w: Number, h: Number, i: Number}\n\t    layout: function layout(props, propName, componentName) {\n\t      var layout = props.layout;\n\t      // I hope you're setting the _grid property on the grid items\n\t      if (layout === undefined) return;\n\t      utils.validateLayout(layout, 'layout');\n\t    },\n\t\n\t    layouts: function layouts(props, propName, componentName) {\n\t      if (props.layouts) {\n\t        throw new Error('ReactGridLayout does not use `layouts`: Use ReactGridLayout.Responsive.');\n\t      }\n\t    },\n\t\n\t    // margin between items [x, y] in px\n\t    margin: React.PropTypes.array,\n\t    // Rows have a static height, but you can change this based on breakpoints if you like\n\t    rowHeight: React.PropTypes.number,\n\t\n\t    //\n\t    // Flags\n\t    //\n\t    isDraggable: React.PropTypes.bool,\n\t    isResizable: React.PropTypes.bool,\n\t    // Use CSS transforms instead of top/left\n\t    useCSSTransforms: React.PropTypes.bool,\n\t\n\t    //\n\t    // Callbacks\n\t    //\n\t\n\t    // Callback so you can save the layout.\n\t    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n\t    onLayoutChange: React.PropTypes.func,\n\t\n\t    // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e).\n\t    // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n\t    onDragStart: React.PropTypes.func,\n\t    // Calls on each drag movement.\n\t    onDrag: React.PropTypes.func,\n\t    // Calls when drag is complete.\n\t    onDragStop: React.PropTypes.func,\n\t    //Calls when resize starts.\n\t    onResizeStart: React.PropTypes.func,\n\t    // Calls when resize movement happens.\n\t    onResize: React.PropTypes.func,\n\t    // Calls when resize is complete.\n\t    onResizeStop: React.PropTypes.func,\n\t\n\t    //\n\t    // Other validations\n\t    //\n\t\n\t    // Children must not have duplicate keys.\n\t    children: function children(props, propName, componentName) {\n\t      React.PropTypes.node.apply(this, arguments);\n\t      var children = props[propName];\n\t\n\t      // Check children keys for duplicates. Throw if found.\n\t      var keys = {};\n\t      React.Children.forEach(children, function (child, i, list) {\n\t        if (keys[child.key]) {\n\t          throw new Error('Duplicate child key found! This will cause problems in ReactGridLayout.');\n\t        }\n\t        keys[child.key] = true;\n\t      });\n\t    }\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      autoSize: true,\n\t      cols: 12,\n\t      rowHeight: 150,\n\t      layout: [],\n\t      margin: [10, 10],\n\t      isDraggable: true,\n\t      isResizable: true,\n\t      useCSSTransforms: true,\n\t      verticalCompact: true,\n\t      onLayoutChange: function onLayoutChange() {},\n\t      onDragStart: function onDragStart() {},\n\t      onDrag: function onDrag() {},\n\t      onDragStop: function onDragStop() {},\n\t      onResizeStart: function onResizeStart() {},\n\t      onResize: function onResize() {},\n\t      onResizeStop: function onResizeStop() {}\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      activeDrag: null,\n\t      isMounted: false,\n\t      layout: utils.synchronizeLayoutWithChildren(this.props.layout, this.props.children, this.props.cols, this.props.verticalCompact),\n\t      width: this.props.initialWidth\n\t    };\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    // Call back with layout on mount. This should be done after correcting the layout width\n\t    // to ensure we don't rerender with the wrong width.\n\t    this.props.onLayoutChange(this.state.layout);\n\t    this.setState({ isMounted: true });\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    // This allows you to set the width manually if you like.\n\t    // Use manual width changes in combination with `listenToWindowResize: false`\n\t    if (nextProps.width !== this.props.width) this.onWidthChange(nextProps.width);\n\t\n\t    // If children change, regenerate the layout.\n\t    if (nextProps.children.length !== this.props.children.length) {\n\t      this.setState({\n\t        layout: utils.synchronizeLayoutWithChildren(this.state.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n\t      });\n\t    }\n\t\n\t    // Allow parent to set layout directly.\n\t    if (nextProps.layout && JSON.stringify(nextProps.layout) !== JSON.stringify(this.state.layout)) {\n\t      this.setState({\n\t        layout: utils.synchronizeLayoutWithChildren(nextProps.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n\t      });\n\t    }\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {\n\t    // Call back so we can store the layout\n\t    // Do it only when a resize/drag is not active, otherwise there are way too many callbacks\n\t    if (this.state.layout !== prevState.layout && !this.state.activeDrag) {\n\t      this.props.onLayoutChange(this.state.layout, this.state.layouts);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Calculates a pixel value for the container.\n\t   * @return {String} Container height in pixels.\n\t   */\n\t  containerHeight: function containerHeight() {\n\t    if (!this.props.autoSize) return;\n\t    return utils.bottom(this.state.layout) * this.props.rowHeight + this.props.margin[1] + 'px';\n\t  },\n\t\n\t  /**\n\t   * When the width changes, save it to state. This helps with left/width calculations.\n\t   */\n\t  onWidthChange: function onWidthChange(width) {\n\t    this.setState({ width: width });\n\t  },\n\t\n\t  /**\n\t   * When dragging starts\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDragStart: function onDragStart(i, x, y, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var position = _ref.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t\n\t    // No need to clone, `l` hasn't changed.\n\t    this.props.onDragStart(layout, l, l, null, e);\n\t  },\n\t  /**\n\t   * Each drag movement create a new dragelement and move the element to the dragged location\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDrag: function onDrag(i, x, y, _ref2) {\n\t    var e = _ref2.e;\n\t    var element = _ref2.element;\n\t    var position = _ref2.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    // Clone layout item so we can pass it to the callback.\n\t    var oldL = utils.clone(l);\n\t\n\t    // Create placeholder (display only)\n\t    var placeholder = {\n\t      w: l.w, h: l.h, x: l.x, y: l.y, placeholder: true, i: i\n\t    };\n\t\n\t    // Move the element to the dragged location.\n\t    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\t\n\t    this.props.onDrag(layout, oldL, l, placeholder, e);\n\t\n\t    this.setState({\n\t      layout: utils.compact(layout, this.props.verticalCompact),\n\t      activeDrag: placeholder\n\t    });\n\t  },\n\t\n\t  /**\n\t   * When dragging stops, figure out which position the element is closest to and update its x and y.\n\t   * @param  {Number} i Index of the child.\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDragStop: function onDragStop(i, x, y, _ref3) {\n\t    var e = _ref3.e;\n\t    var element = _ref3.element;\n\t    var position = _ref3.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\t\n\t    // Move the element here\n\t    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\t\n\t    this.props.onDragStop(layout, oldL, l, null, e);\n\t\n\t    // Set state\n\t    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: null });\n\t  },\n\t\n\t  onResizeStart: function onResizeStart(i, w, h, _ref4) {\n\t    var e = _ref4.e;\n\t    var element = _ref4.element;\n\t    var size = _ref4.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t\n\t    // No need to clone, item hasn't changed\n\t    this.props.onResizeStart(layout, l, l, null, e);\n\t  },\n\t\n\t  onResize: function onResize(i, w, h, _ref5) {\n\t    var e = _ref5.e;\n\t    var element = _ref5.element;\n\t    var size = _ref5.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\t\n\t    // Set new width and height.\n\t    l.w = w;\n\t    l.h = h;\n\t\n\t    // Create placeholder element (display only)\n\t    var placeholder = {\n\t      w: w, h: h, x: l.x, y: l.y, placeholder: true, i: i\n\t    };\n\t\n\t    this.props.onResize(layout, oldL, l, placeholder, e);\n\t\n\t    // Re-compact the layout and set the drag placeholder.\n\t    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: placeholder });\n\t  },\n\t\n\t  onResizeStop: function onResizeStop(i, x, y, _ref6) {\n\t    var e = _ref6.e;\n\t    var element = _ref6.element;\n\t    var size = _ref6.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\t\n\t    this.props.onResizeStop(layout, oldL, l, null, e);\n\t\n\t    this.setState({ activeDrag: null, layout: utils.compact(layout, this.props.verticalCompact) });\n\t  },\n\t\n\t  /**\n\t   * Create a placeholder object.\n\t   * @return {Element} Placeholder div.\n\t   */\n\t  placeholder: function placeholder() {\n\t    if (!this.state.activeDrag) return '';\n\t\n\t    // {...this.state.activeDrag} is pretty slow, actually\n\t    return React.createElement(\n\t      GridItem,\n\t      {\n\t        w: this.state.activeDrag.w,\n\t        h: this.state.activeDrag.h,\n\t        x: this.state.activeDrag.x,\n\t        y: this.state.activeDrag.y,\n\t        i: this.state.activeDrag.i,\n\t        isPlaceholder: true,\n\t        className: 'react-grid-placeholder',\n\t        containerWidth: this.state.width,\n\t        cols: this.props.cols,\n\t        margin: this.props.margin,\n\t        rowHeight: this.props.rowHeight,\n\t        isDraggable: false,\n\t        isResizable: false,\n\t        useCSSTransforms: this.props.useCSSTransforms\n\t      },\n\t      React.createElement('div', null)\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Given a grid item, set its style attributes & surround in a <Draggable>.\n\t   * @param  {Element} child React element.\n\t   * @param  {Number}  i     Index of element.\n\t   * @return {Element}       Element wrapped in draggable and properly placed.\n\t   */\n\t  processGridItem: function processGridItem(child) {\n\t    var i = child.key;\n\t    var l = utils.getLayoutItem(this.state.layout, i);\n\t\n\t    // watchStart property tells Draggable to react to changes in the start param\n\t    // Must be turned off on the item we're dragging as the changes in `activeDrag` cause rerenders\n\t    var moveOnStartChange = !(this.state.activeDrag && this.state.activeDrag.i === i);\n\t\n\t    // Parse 'static'. Any properties defined directly on the grid item will take precedence.\n\t    var draggable, resizable;\n\t    if (l['static'] || this.props.isDraggable === false) draggable = false;\n\t    if (l['static'] || this.props.isResizable === false) resizable = false;\n\t\n\t    return React.createElement(\n\t      GridItem,\n\t      _extends({\n\t        containerWidth: this.state.width,\n\t        cols: this.props.cols,\n\t        margin: this.props.margin,\n\t        rowHeight: this.props.rowHeight,\n\t        moveOnStartChange: moveOnStartChange,\n\t        cancel: this.props.draggableCancel,\n\t        handle: this.props.draggableHandle,\n\t        onDragStop: this.onDragStop,\n\t        onDragStart: this.onDragStart,\n\t        onDrag: this.onDrag,\n\t        onResizeStart: this.onResizeStart,\n\t        onResize: this.onResize,\n\t        onResizeStop: this.onResizeStop,\n\t        isDraggable: draggable,\n\t        isResizable: resizable,\n\t        useCSSTransforms: this.props.useCSSTransforms && this.state.isMounted,\n\t        usePercentages: !this.state.isMounted\n\t      }, l),\n\t      child\n\t    );\n\t  },\n\t\n\t  render: function render() {\n\t    // Calculate classname\n\t    var _props = this.props;\n\t    var className = _props.className;\n\t\n\t    var props = _objectWithoutProperties(_props, ['className']);\n\t\n\t    className = 'react-grid-layout ' + (className || '');\n\t\n\t    return React.createElement(\n\t      'div',\n\t      _extends({}, props, { className: className, style: { height: this.containerHeight() } }),\n\t      React.Children.map(this.props.children, this.processGridItem),\n\t      this.placeholder()\n\t    );\n\t  }\n\t});\n\t\n\tmodule.exports = ReactGridLayout;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar React = __webpack_require__(1);\n\t\n\t/**\n\t * A simple mixin that provides facility for listening to container resizes.\n\t */\n\tvar WidthListeningMixin = {\n\t\n\t  propTypes: {\n\t    // This allows setting this on the server side\n\t    initialWidth: React.PropTypes.number,\n\t\n\t    // If false, you should supply width yourself. Good if you want to debounce resize events\n\t    // or reuse a handler from somewhere else.\n\t    listenToWindowResize: React.PropTypes.bool\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      initialWidth: 1280,\n\t      listenToWindowResize: true\n\t    };\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    if (this.props.listenToWindowResize) {\n\t      window.addEventListener('resize', this.onWindowResize);\n\t      // This is intentional. Once to properly set the breakpoint and resize the elements,\n\t      // and again to compensate for any scrollbar that appeared because of the first step.\n\t      this.onWindowResize();\n\t      this.onWindowResize();\n\t    }\n\t  },\n\t\n\t  componentWillUnmount: function componentWillUnmount() {\n\t    window.removeEventListener('resize', this.onWindowResize);\n\t  },\n\t\n\t  /**\n\t   * On window resize, update width.\n\t   */\n\t  onWindowResize: function onWindowResize() {\n\t    this.onWidthChange(this.getDOMNode().offsetWidth);\n\t  }\n\t\n\t};\n\t\n\tmodule.exports = WidthListeningMixin;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar React = __webpack_require__(1);\n\tvar Draggable = __webpack_require__(21);\n\tvar PureRenderMixin = __webpack_require__(5);\n\tvar assign = __webpack_require__(4);\n\tvar cloneWithProps = __webpack_require__(6);\n\t\n\tvar Resizable = module.exports = React.createClass({\n\t  displayName: 'Resizable',\n\t  mixins: [PureRenderMixin],\n\t\n\t  propTypes: {\n\t    // Require that one and only one child be present.\n\t    children: React.PropTypes.element.isRequired,\n\t    // Functions\n\t    onResizeStop: React.PropTypes.func,\n\t    onResizeStart: React.PropTypes.func,\n\t    onResize: React.PropTypes.func,\n\t\n\t    width: React.PropTypes.number.isRequired,\n\t    height: React.PropTypes.number.isRequired,\n\t    // If you change this, be sure to update your css\n\t    handleSize: React.PropTypes.array,\n\t    // These will be passed wholesale to react-draggable\n\t    draggableOpts: React.PropTypes.object\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      handleSize: [20, 20]\n\t    };\n\t  },\n\t\n\t  minConstraints: function minConstraints() {\n\t    return parseConstraints(this.props.minConstraints, this.props.handleSize) || this.props.handleSize;\n\t  },\n\t\n\t  maxConstraints: function maxConstraints() {\n\t    return parseConstraints(this.props.maxConstraints, this.props.handleSize);\n\t  },\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  resizeHandler: function resizeHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref) {\n\t      var element = _ref.element;\n\t      var position = _ref.position;\n\t\n\t      me.props[handlerName] && me.props[handlerName](e, { element: element, size: calcWH(position, me.props.handleSize) });\n\t    };\n\t  },\n\t\n\t  render: function render() {\n\t    var p = this.props;\n\t\n\t    // What we're doing here is getting the child of this element, and cloning it with this element's props.\n\t    // We are then defining its children as:\n\t    // Its original children (resizable's child's children), and\n\t    // A draggable handle.\n\t    return cloneWithProps(p.children, assign({}, p, {\n\t      children: [p.children.props.children, React.createElement(\n\t        Draggable,\n\t        _extends({}, p.draggableOpts, {\n\t          start: { x: p.width - 20, y: p.height - 20 },\n\t          moveOnStartChange: true,\n\t          onStop: this.resizeHandler('onResizeStop'),\n\t          onStart: this.resizeHandler('onResizeStart'),\n\t          onDrag: this.resizeHandler('onResize'),\n\t          minConstraints: this.minConstraints(),\n\t          maxConstraints: this.maxConstraints()\n\t        }),\n\t        React.createElement('span', { className: 'react-resizable-handle' })\n\t      )]\n\t    }));\n\t  }\n\t});\n\t\n\t/**\n\t * Parse left and top coordinates; we have to add the handle size to get the full picture.\n\t * @param  {Number} options.left Left coordinate.\n\t * @param  {Number} options.top  Top coordinate.\n\t * @param  {Array}  handleSize   Handle data.\n\t * @return {Object}              Coordinates\n\t */\n\tfunction calcWH(_ref, handleSize) {\n\t  var left = _ref.left;\n\t  var top = _ref.top;\n\t\n\t  return { width: left + handleSize[0], height: top + handleSize[1] };\n\t}\n\t\n\t/**\n\t * Constraints must be subtracted by the size of the handle to work properly.\n\t * This has a side-effect of effectively limiting the minimum size to the handleSize,\n\t * which IMO is fine.\n\t * @param  {Array} constraints Constraints array.\n\t * @param  {Array} handleSize  Handle size array.\n\t * @return {Array}             Transformed constraints.\n\t */\n\tfunction parseConstraints(constraints, handleSize) {\n\t  if (!constraints) {\n\t    return;\n\t  }return constraints.map(function (c, i) {\n\t    return c - handleSize[i];\n\t  });\n\t}\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar React = __webpack_require__(1);\n\tvar cloneWithProps = __webpack_require__(6);\n\tvar utils = __webpack_require__(2);\n\tvar Draggable = __webpack_require__(16);\n\tvar Resizable = __webpack_require__(20).Resizable;\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\t\n\t/**\n\t * An individual item within a ReactGridLayout.\n\t */\n\tvar GridItem = React.createClass({\n\t  displayName: 'GridItem',\n\t\n\t  mixins: [PureDeepRenderMixin],\n\t\n\t  propTypes: {\n\t    // Children must be only a single element\n\t    children: React.PropTypes.element,\n\t\n\t    // General grid attributes\n\t    cols: React.PropTypes.number.isRequired,\n\t    containerWidth: React.PropTypes.number.isRequired,\n\t    rowHeight: React.PropTypes.number.isRequired,\n\t    margin: React.PropTypes.array.isRequired,\n\t\n\t    // These are all in grid units\n\t    x: React.PropTypes.number.isRequired,\n\t    y: React.PropTypes.number.isRequired,\n\t    w: React.PropTypes.number.isRequired,\n\t    h: React.PropTypes.number.isRequired,\n\t\n\t    // All optional\n\t    minW: function minW(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.minW > props.w || props.minW > props.maxW) constraintError('minW', props);\n\t    },\n\t    maxW: function maxW(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.maxW < props.w || props.maxW < props.minW) constraintError('maxW', props);\n\t    },\n\t    minH: function minH(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.minH > props.h || props.minH > props.maxH) constraintError('minH', props);\n\t    },\n\t    maxH: function maxH(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.maxH < props.h || props.maxH < props.minH) constraintError('maxH', props);\n\t    },\n\t\n\t    // ID is nice to have for callbacks\n\t    i: React.PropTypes.string.isRequired,\n\t\n\t    // If true, item will be repositioned when x/y/w/h change\n\t    moveOnStartChange: React.PropTypes.bool,\n\t\n\t    // Functions\n\t    onDragStop: React.PropTypes.func,\n\t    onDragStart: React.PropTypes.func,\n\t    onDrag: React.PropTypes.func,\n\t    onResizeStop: React.PropTypes.func,\n\t    onResizeStart: React.PropTypes.func,\n\t    onResize: React.PropTypes.func,\n\t\n\t    // Flags\n\t    isDraggable: React.PropTypes.bool,\n\t    isResizable: React.PropTypes.bool,\n\t    // Use CSS transforms instead of top/left\n\t    useCSSTransforms: React.PropTypes.bool,\n\t    isPlaceholder: React.PropTypes.bool,\n\t\n\t    // Others\n\t    className: React.PropTypes.string,\n\t    // Selector for draggable handle\n\t    handle: React.PropTypes.string,\n\t    // Selector for draggable cancel (see react-draggable)\n\t    cancel: React.PropTypes.string\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      isDraggable: true,\n\t      isResizable: true,\n\t      useCSSTransforms: true,\n\t      className: '',\n\t      cancel: '',\n\t      minH: 1,\n\t      minW: 1,\n\t      maxH: Infinity,\n\t      maxW: Infinity\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      resizing: false,\n\t      className: ''\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Return position on the page given an x, y, w, h.\n\t   * left, top, width, height are all in pixels.\n\t   * @param  {Number}  x             X coordinate in grid units.\n\t   * @param  {Number}  y             Y coordinate in grid units.\n\t   * @param  {Number}  w             W coordinate in grid units.\n\t   * @param  {Number}  h             H coordinate in grid units.\n\t   * @return {Object}                Object containing coords.\n\t   */\n\t  calcPosition: function calcPosition(x, y, w, h) {\n\t    var p = this.props;\n\t    var width = p.containerWidth - p.margin[0];\n\t    var out = {\n\t      left: width * (x / p.cols) + p.margin[0],\n\t      top: p.rowHeight * y + p.margin[1],\n\t      width: width * (w / p.cols) - p.margin[0],\n\t      height: h * p.rowHeight - p.margin[1]\n\t    };\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Translate x and y coordinates from pixels to grid units.\n\t   * @param  {Number} options.left  Left offset in pixels.\n\t   * @param  {Number} options.top   Top offset in pixels.\n\t   * @return {Object}               x and y in grid units.\n\t   */\n\t  calcXY: function calcXY(_ref) {\n\t    var left = _ref.left;\n\t    var top = _ref.top;\n\t\n\t    left = left - this.props.margin[0];\n\t    top = top - this.props.margin[1];\n\t    // This is intentional; because so much of the logic on moving boxes up/down relies\n\t    // on an exact y position, we only round the x, not the y.\n\t    var x = Math.round(left / this.props.containerWidth * this.props.cols);\n\t    var y = Math.floor(top / this.props.rowHeight);\n\t    x = Math.max(Math.min(x, this.props.cols), 0);\n\t    y = Math.max(y, 0);\n\t    return { x: x, y: y };\n\t  },\n\t\n\t  /**\n\t   * Given a height and width in pixel values, calculate grid units.\n\t   * @param  {Number} options.height Height in pixels.\n\t   * @param  {Number} options.width  Width in pixels.\n\t   * @return {Object}                w, h as grid units.\n\t   */\n\t  calcWH: function calcWH(_ref2) {\n\t    var height = _ref2.height;\n\t    var width = _ref2.width;\n\t\n\t    width = width + this.props.margin[0];\n\t    height = height + this.props.margin[1];\n\t    var w = Math.round(width / this.props.containerWidth * this.props.cols);\n\t    var h = Math.round(height / this.props.rowHeight);\n\t    w = Math.max(Math.min(w, this.props.cols - this.props.x), 0);\n\t    h = Math.max(h, 0);\n\t    return { w: w, h: h };\n\t  },\n\t\n\t  /**\n\t   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n\t   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n\t   * we don't know exactly what the browser viewport is.\n\t   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n\t   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n\t   *\n\t   * @param  {Object} pos Position object with width, height, left, top.\n\t   * @return {Object}     Style object.\n\t   */\n\t  createStyle: function createStyle(pos) {\n\t    var style = {\n\t      width: pos.width + 'px',\n\t      height: pos.height + 'px',\n\t      left: pos.left + 'px',\n\t      top: pos.top + 'px',\n\t      position: 'absolute'\n\t    };\n\t\n\t    // This is used for server rendering.\n\t    if (this.props.usePercentages) {\n\t      pos.left = utils.perc(pos.left / this.props.containerWidth);\n\t      style.left = pos.left;\n\t      style.width = utils.perc(pos.width / this.props.containerWidth);\n\t    }\n\t\n\t    // CSS Transforms support\n\t    if (this.props.useCSSTransforms) {\n\t      utils.setTransform(style, [pos.left, pos.top]);\n\t      delete style.left;\n\t      delete style.top;\n\t    }\n\t\n\t    return style;\n\t  },\n\t\n\t  /**\n\t   * Mix a Draggable instance into a child.\n\t   * @param  {Element} child    Child element.\n\t   * @param  {Object} position  Position object (pixel values)\n\t   * @return {Element}          Child wrapped in Draggable.\n\t   */\n\t  mixinDraggable: function mixinDraggable(child, position) {\n\t    var start = typeof position.left === 'string' ? undefined : { x: position.left, y: position.top };\n\t    return React.createElement(\n\t      Draggable,\n\t      {\n\t        start: start,\n\t        moveOnStartChange: this.props.moveOnStartChange,\n\t        onStop: this.onDragHandler('onDragStop'),\n\t        onStart: this.onDragHandler('onDragStart'),\n\t        onDrag: this.onDragHandler('onDrag'),\n\t        handle: this.props.handle,\n\t        cancel: '.react-resizable-handle ' + this.props.cancel,\n\t        useCSSTransforms: this.props.useCSSTransforms\n\t      },\n\t      child\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Mix a Resizable instance into a child.\n\t   * @param  {Element} child    Child element.\n\t   * @param  {Object} position  Position object (pixel values)\n\t   * @return {Element}          Child wrapped in Resizable.\n\t   */\n\t  mixinResizable: function mixinResizable(child, position) {\n\t    var p = this.props;\n\t    // This is the max possible width - doesn't go to infinity because of the width of the window\n\t    var maxWidth = this.calcPosition(0, 0, p.cols - p.x, 0).width;\n\t\n\t    // Calculate min/max constraints using our min & maxes\n\t    var mins = this.calcPosition(0, 0, p.minW, p.minH);\n\t    var maxes = this.calcPosition(0, 0, p.maxW, p.maxH);\n\t    var minConstraints = [mins.width, mins.height];\n\t    var maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n\t    return React.createElement(\n\t      Resizable,\n\t      {\n\t        width: position.width,\n\t        height: position.height,\n\t        minConstraints: minConstraints,\n\t        maxConstraints: maxConstraints,\n\t        onResizeStop: this.onResizeHandler('onResizeStop'),\n\t        onResizeStart: this.onResizeHandler('onResizeStart'),\n\t        onResize: this.onResizeHandler('onResize')\n\t      },\n\t      child\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   * All drag events call the function with the given handler name,\n\t   * with the signature (index, x, y).\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  onDragHandler: function onDragHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref3) {\n\t      var element = _ref3.element;\n\t      var position = _ref3.position;\n\t\n\t      if (!me.props[handlerName]) return;\n\t      // Get new XY\n\t\n\t      var _me$calcXY = me.calcXY(position);\n\t\n\t      var x = _me$calcXY.x;\n\t      var y = _me$calcXY.y;\n\t\n\t      // Cap x at numCols\n\t      x = Math.min(x, me.props.cols - me.props.w);\n\t\n\t      me.props[handlerName](me.props.i, x, y, { e: e, element: element, position: position });\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   * All drag events call the function with the given handler name,\n\t   * with the signature (index, x, y).\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  onResizeHandler: function onResizeHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref4) {\n\t      var element = _ref4.element;\n\t      var size = _ref4.size;\n\t\n\t      if (!me.props[handlerName]) return;\n\t\n\t      // Get new XY\n\t\n\t      var _me$calcWH = me.calcWH(size);\n\t\n\t      var w = _me$calcWH.w;\n\t      var h = _me$calcWH.h;\n\t\n\t      // Cap w at numCols\n\t      w = Math.min(w, me.props.cols - me.props.x);\n\t      // Ensure w is at least 1\n\t      w = Math.max(w, 1);\n\t\n\t      // Min/max capping\n\t      w = Math.max(Math.min(w, me.props.maxW), me.props.minW);\n\t      h = Math.max(Math.min(h, me.props.maxH), me.props.minH);\n\t\n\t      me.setState({ resizing: handlerName === 'onResizeStop' ? null : size });\n\t\n\t      me.props[handlerName](me.props.i, w, h, { e: e, element: element, size: size });\n\t    };\n\t  },\n\t\n\t  render: function render() {\n\t    var p = this.props,\n\t        pos = this.calcPosition(p.x, p.y, p.w, p.h);\n\t    if (this.state.resizing) {\n\t      pos.width = this.state.resizing.width;\n\t      pos.height = this.state.resizing.height;\n\t    }\n\t\n\t    // Create the child element. We clone the existing element but modify its className and style.\n\t    var child = cloneWithProps(this.props.children, {\n\t      // Munge a classname. Use passed in classnames and resizing.\n\t      // React with merge the classNames.\n\t      className: ['react-grid-item', this.props.className, this.state.resizing ? 'resizing' : '', this.props.useCSSTransforms ? 'cssTransforms' : ''].join(' '),\n\t      // We can set the width and height on the child, but unfortunately we can't set the position.\n\t      style: this.createStyle(pos)\n\t    });\n\t\n\t    // Resizable support. This is usually on but the user can toggle it off.\n\t    if (this.props.isResizable) {\n\t      child = this.mixinResizable(child, pos);\n\t    }\n\t\n\t    // Draggable support. This is always on, except for with placeholders.\n\t    if (this.props.isDraggable) {\n\t      child = this.mixinDraggable(child, pos);\n\t    }\n\t\n\t    return child;\n\t  }\n\t});\n\t\n\tfunction constraintError(name, props) {\n\t  delete props.children;\n\t  throw new Error(name + ' overrides contraints on gridItem ' + props.i + '. Full props: ' + JSON.stringify(props));\n\t}\n\t\n\tmodule.exports = GridItem;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\t\n\tvar React = __webpack_require__(1);\n\tvar utils = __webpack_require__(2);\n\tvar responsiveUtils = __webpack_require__(12);\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\tvar WidthListeningMixin = __webpack_require__(8);\n\tvar ReactGridLayout = __webpack_require__(7);\n\t\n\t/**\n\t * A wrapper around ReactGridLayout to support responsive breakpoints.\n\t */\n\tvar ResponsiveReactGridLayout = React.createClass({\n\t  displayName: 'ResponsiveReactGridLayout',\n\t\n\t  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\t\n\t  propTypes: {\n\t    //\n\t    // Basic props\n\t    //\n\t\n\t    // Optional, but if you are managing width yourself you may want to set the breakpoint\n\t    // yourself as well.\n\t    breakpoint: React.PropTypes.string,\n\t\n\t    // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n\t    breakpoints: React.PropTypes.object,\n\t\n\t    // # of cols. This is a breakpoint -> cols map\n\t    cols: React.PropTypes.object,\n\t\n\t    // layouts is an object mapping breakpoints to layouts.\n\t    // e.g. {lg: Layout, md: Layout, ...}\n\t    layouts: function layouts(props, propName, componentName) {\n\t      React.PropTypes.object.isRequired.apply(this, arguments);\n\t\n\t      var layouts = props.layouts;\n\t      Object.keys(layouts).map(function (k) {\n\t        utils.validateLayout(layouts[k], 'layouts.' + k);\n\t      });\n\t    },\n\t\n\t    //\n\t    // Callbacks\n\t    //\n\t\n\t    // Calls back with breakpoint and new # cols\n\t    onBreakpointChange: React.PropTypes.func,\n\t\n\t    // Callback so you can save the layout.\n\t    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n\t    onLayoutChange: React.PropTypes.func\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n\t      cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n\t      layouts: {},\n\t      onBreakpointChange: function onBreakpointChange() {},\n\t      onLayoutChange: function onLayoutChange() {}\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    var breakpoint = this.props.breakpoint || responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, this.props.initialWidth);\n\t    var cols = responsiveUtils.getColsFromBreakpoint(breakpoint, this.props.cols);\n\t\n\t    // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n\t    // for this layout.\n\t    var initialLayout = responsiveUtils.findOrGenerateResponsiveLayout(this.props.layouts, this.props.breakpoints, breakpoint, breakpoint, cols, this.props.verticalCompact);\n\t\n\t    return {\n\t      layout: initialLayout,\n\t      // storage for layouts obsoleted by breakpoints\n\t      layouts: this.props.layouts || {},\n\t      breakpoint: breakpoint,\n\t      cols: cols,\n\t      width: this.props.initialWidth\n\t    };\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    // This allows you to set the width manually if you like.\n\t    // Use manual width changes in combination with `listenToWindowResize: false`\n\t    if (nextProps.width) this.onWidthChange(nextProps.width);\n\t\n\t    // Allow parent to set breakpoint directly.\n\t    if (nextProps.breakpoint !== this.props.breakpoint) {\n\t      this.onWidthChange(this.state.width);\n\t    }\n\t\n\t    // Allow parent to set layouts directly.\n\t    if (nextProps.layouts && nextProps.layouts !== this.state.layouts) {\n\t      // Since we're setting an entirely new layout object, we must generate a new responsive layout\n\t      // if one does not exist.\n\t      var newLayout = responsiveUtils.findOrGenerateResponsiveLayout(nextProps.layouts, nextProps.breakpoints, this.state.breakpoint, this.state.breakpoint, this.state.cols, this.props.verticalLayout);\n\t\n\t      this.setState({\n\t        layouts: nextProps.layouts,\n\t        layout: newLayout\n\t      });\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Bubble this up, add `layouts` object.\n\t   * @param  {Array} layout Layout from inner Grid.\n\t   */\n\t  onLayoutChange: function onLayoutChange(layout) {\n\t    this.state.layouts[this.state.breakpoint] = layout;\n\t    this.setState({ layout: layout, layouts: this.state.layouts });\n\t    this.props.onLayoutChange(layout, this.state.layouts);\n\t  },\n\t\n\t  /**\n\t   * When the width changes work through breakpoints and reset state with the new width & breakpoint.\n\t   * Width changes are necessary to figure out the widget widths.\n\t   */\n\t  onWidthChange: function onWidthChange(width) {\n\t    // Set new breakpoint\n\t    var newState = { width: width };\n\t    newState.breakpoint = this.props.breakpoint || responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, newState.width);\n\t    newState.cols = responsiveUtils.getColsFromBreakpoint(newState.breakpoint, this.props.cols);\n\t\n\t    // Breakpoint change\n\t    if (newState.cols !== this.state.cols) {\n\t\n\t      // Store the current layout\n\t      newState.layouts = this.state.layouts;\n\t      newState.layouts[this.state.breakpoint] = JSON.parse(JSON.stringify(this.state.layout));\n\t\n\t      // Find or generate a new one.\n\t      newState.layout = responsiveUtils.findOrGenerateResponsiveLayout(newState.layouts, this.props.breakpoints, newState.breakpoint, this.state.breakpoint, newState.cols, this.props.verticalLayout);\n\t\n\t      // This adds missing items.\n\t      newState.layout = utils.synchronizeLayoutWithChildren(newState.layout, this.props.children, newState.cols, this.props.verticalCompact);\n\t\n\t      // Store this new layout as well.\n\t      newState.layouts[newState.breakpoint] = newState.layout;\n\t\n\t      this.props.onBreakpointChange(newState.breakpoint, newState.cols);\n\t    }\n\t\n\t    this.setState(newState);\n\t  },\n\t\n\t  render: function render() {\n\t    // Don't pass responsive props to RGL.\n\t    /*jshint unused:false*/\n\t    var _props = this.props;\n\t    var layouts = _props.layouts;\n\t    var onBreakpointChange = _props.onBreakpointChange;\n\t    var breakpoints = _props.breakpoints;\n\t\n\t    var props = _objectWithoutProperties(_props, ['layouts', 'onBreakpointChange', 'breakpoints']);\n\t\n\t    return React.createElement(\n\t      ReactGridLayout,\n\t      _extends({}, props, {\n\t        layout: this.state.layout,\n\t        cols: this.state.cols,\n\t        listenToWindowResize: false,\n\t        onLayoutChange: this.onLayoutChange,\n\t        width: this.state.width }),\n\t      this.props.children\n\t    );\n\t  }\n\t});\n\t\n\tmodule.exports = ResponsiveReactGridLayout;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\tvar responsiveUtils = module.exports = {\n\t\n\t  /**\n\t   * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n\t   *\n\t   * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n\t   * @param  {Number} width Screen width.\n\t   * @return {String}       Highest breakpoint that is less than width.\n\t   */\n\t  getBreakpointFromWidth: function getBreakpointFromWidth(breakpoints, width) {\n\t    var sorted = responsiveUtils.sortBreakpoints(breakpoints);\n\t    var matching = sorted[0];\n\t    for (var i = 1, len = sorted.length; i < len; i++) {\n\t      var breakpointName = sorted[i];\n\t      if (width > breakpoints[breakpointName]) matching = breakpointName;\n\t    }\n\t    return matching;\n\t  },\n\t\n\t  /**\n\t   * Given a breakpoint, get the # of cols set for it.\n\t   * @param  {String} breakpoint Breakpoint name.\n\t   * @param  {Object} cols       Map of breakpoints to cols.\n\t   * @return {Number}            Number of cols.\n\t   */\n\t  getColsFromBreakpoint: function getColsFromBreakpoint(breakpoint, cols) {\n\t    if (!cols[breakpoint]) {\n\t      throw new Error('ResponsiveReactGridLayout: `cols` entry for breakpoint ' + breakpoint + ' is missing!');\n\t    }\n\t    return cols[breakpoint];\n\t  },\n\t\n\t  /**\n\t   * Given existing layouts and a new breakpoint, find or generate a new layout.\n\t   *\n\t   * This finds the layout above the new one and generates from it, if it exists.\n\t   *\n\t   * @param  {Array} layouts     Existing layouts.\n\t   * @param  {Array} breakpoints All breakpoints.\n\t   * @param  {String} breakpoint New breakpoint.\n\t   * @param  {String} breakpoint Last breakpoint (for fallback).\n\t   * @param  {Number} cols       Column count at new breakpoint.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}             New layout.\n\t   */\n\t  findOrGenerateResponsiveLayout: function findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, verticalCompact) {\n\t    // If it already exists, just return it.\n\t    if (layouts[breakpoint]) return layouts[breakpoint];\n\t    // Find or generate the next layout\n\t    var layout = layouts[lastBreakpoint];\n\t    var breakpointsSorted = responsiveUtils.sortBreakpoints(breakpoints);\n\t    var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n\t    for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n\t      var b = breakpointsAbove[i];\n\t      if (layouts[b]) {\n\t        layout = layouts[b];\n\t        break;\n\t      }\n\t    }\n\t    layout = JSON.parse(JSON.stringify(layout || [])); // clone layout so we don't modify existing items\n\t    return utils.compact(utils.correctBounds(layout, { cols: cols }), verticalCompact);\n\t  },\n\t\n\t  /**\n\t   * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n\t   * e.g. ['xxs', 'xs', 'sm', ...]\n\t   *\n\t   * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n\t   * @return {Array}              Sorted breakpoints.\n\t   */\n\t  sortBreakpoints: function sortBreakpoints(breakpoints) {\n\t    var keys = Object.keys(breakpoints);\n\t    return keys.sort(function (a, b) {\n\t      return breakpoints[a] - breakpoints[b];\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar pSlice = Array.prototype.slice;\n\tvar objectKeys = __webpack_require__(15);\n\tvar isArguments = __webpack_require__(14);\n\t\n\tvar deepEqual = module.exports = function (actual, expected, opts) {\n\t  if (!opts) opts = {};\n\t  // 7.1. All identical values are equivalent, as determined by ===.\n\t  if (actual === expected) {\n\t    return true;\n\t\n\t  } else if (actual instanceof Date && expected instanceof Date) {\n\t    return actual.getTime() === expected.getTime();\n\t\n\t  // 7.3. Other pairs that do not both pass typeof value == 'object',\n\t  // equivalence is determined by ==.\n\t  } else if (typeof actual != 'object' && typeof expected != 'object') {\n\t    return opts.strict ? actual === expected : actual == expected;\n\t\n\t  // 7.4. For all other Object pairs, including Array objects, equivalence is\n\t  // determined by having the same number of owned properties (as verified\n\t  // with Object.prototype.hasOwnProperty.call), the same set of keys\n\t  // (although not necessarily the same order), equivalent values for every\n\t  // corresponding key, and an identical 'prototype' property. Note: this\n\t  // accounts for both named and indexed properties on Arrays.\n\t  } else {\n\t    return objEquiv(actual, expected, opts);\n\t  }\n\t}\n\t\n\tfunction isUndefinedOrNull(value) {\n\t  return value === null || value === undefined;\n\t}\n\t\n\tfunction isBuffer (x) {\n\t  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n\t  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n\t    return false;\n\t  }\n\t  if (x.length > 0 && typeof x[0] !== 'number') return false;\n\t  return true;\n\t}\n\t\n\tfunction objEquiv(a, b, opts) {\n\t  var i, key;\n\t  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n\t    return false;\n\t  // an identical 'prototype' property.\n\t  if (a.prototype !== b.prototype) return false;\n\t  //~~~I've managed to break Object.keys through screwy arguments passing.\n\t  //   Converting to array solves the problem.\n\t  if (isArguments(a)) {\n\t    if (!isArguments(b)) {\n\t      return false;\n\t    }\n\t    a = pSlice.call(a);\n\t    b = pSlice.call(b);\n\t    return deepEqual(a, b, opts);\n\t  }\n\t  if (isBuffer(a)) {\n\t    if (!isBuffer(b)) {\n\t      return false;\n\t    }\n\t    if (a.length !== b.length) return false;\n\t    for (i = 0; i < a.length; i++) {\n\t      if (a[i] !== b[i]) return false;\n\t    }\n\t    return true;\n\t  }\n\t  try {\n\t    var ka = objectKeys(a),\n\t        kb = objectKeys(b);\n\t  } catch (e) {//happens when one is a string literal and the other isn't\n\t    return false;\n\t  }\n\t  // having the same number of owned properties (keys incorporates\n\t  // hasOwnProperty)\n\t  if (ka.length != kb.length)\n\t    return false;\n\t  //the same set of keys (although not necessarily the same order),\n\t  ka.sort();\n\t  kb.sort();\n\t  //~~~cheap key test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    if (ka[i] != kb[i])\n\t      return false;\n\t  }\n\t  //equivalent values for every corresponding key, and\n\t  //~~~possibly expensive deep test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    key = ka[i];\n\t    if (!deepEqual(a[key], b[key], opts)) return false;\n\t  }\n\t  return typeof a === typeof b;\n\t}\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar supportsArgumentsClass = (function(){\n\t  return Object.prototype.toString.call(arguments)\n\t})() == '[object Arguments]';\n\t\n\texports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\t\n\texports.supported = supported;\n\tfunction supported(object) {\n\t  return Object.prototype.toString.call(object) == '[object Arguments]';\n\t};\n\t\n\texports.unsupported = unsupported;\n\tfunction unsupported(object){\n\t  return object &&\n\t    typeof object == 'object' &&\n\t    typeof object.length == 'number' &&\n\t    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n\t    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n\t    false;\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = typeof Object.keys === 'function'\n\t  ? Object.keys : shim;\n\t\n\texports.shim = shim;\n\tfunction shim (obj) {\n\t  var keys = [];\n\t  for (var key in obj) keys.push(key);\n\t  return keys;\n\t}\n\n\n/***/ },\n/* 16 */\n[25, 17],\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar React = __webpack_require__(1);\n\tvar emptyFunction = function(){};\n\tvar assign = __webpack_require__(4);\n\tvar classNames = __webpack_require__(18);\n\t\n\t//\n\t// Helpers. See Element definition below this section.\n\t//\n\t\n\tfunction createUIEvent(draggable) {\n\t  // State changes are often (but not always!) async. We want the latest value.\n\t  var state = draggable._pendingState || draggable.state;\n\t  return {\n\t    node: draggable.getDOMNode(),\n\t    position: {\n\t      top: state.clientY,\n\t      left: state.clientX\n\t    }\n\t  };\n\t}\n\t\n\tfunction canDragY(draggable) {\n\t  return draggable.props.axis === 'both' ||\n\t      draggable.props.axis === 'y';\n\t}\n\t\n\tfunction canDragX(draggable) {\n\t  return draggable.props.axis === 'both' ||\n\t      draggable.props.axis === 'x';\n\t}\n\t\n\tfunction isFunction(func) {\n\t  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n\t}\n\t\n\t// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\n\tfunction findInArray(array, callback) {\n\t  for (var i = 0, length = array.length; i < length; i++) {\n\t    if (callback.apply(callback, [array[i], i, array])) return array[i];\n\t  }\n\t}\n\t\n\tfunction matchesSelector(el, selector) {\n\t  var method = findInArray([\n\t    'matches',\n\t    'webkitMatchesSelector',\n\t    'mozMatchesSelector',\n\t    'msMatchesSelector',\n\t    'oMatchesSelector'\n\t  ], function(method){\n\t    return isFunction(el[method]);\n\t  });\n\t\n\t  return el[method].call(el, selector);\n\t}\n\t\n\t/**\n\t * simple abstraction for dragging events names\n\t * */\n\tvar eventsFor = {\n\t  touch: {\n\t    start: 'touchstart',\n\t    move: 'touchmove',\n\t    end: 'touchend'\n\t  },\n\t  mouse: {\n\t    start: 'mousedown',\n\t    move: 'mousemove',\n\t    end: 'mouseup'\n\t  }\n\t};\n\t\n\t// Default to mouse events\n\tvar dragEventFor = eventsFor['mouse'];\n\t\n\t/**\n\t * get {clientX, clientY} positions of control\n\t * */\n\tfunction getControlPosition(e) {\n\t  var position = (e.touches && e.touches[0]) || e;\n\t  return {\n\t    clientX: position.clientX,\n\t    clientY: position.clientY\n\t  };\n\t}\n\t\n\tfunction addEvent(el, event, handler) {\n\t  if (!el) { return; }\n\t  if (el.attachEvent) {\n\t    el.attachEvent('on' + event, handler);\n\t  } else if (el.addEventListener) {\n\t    el.addEventListener(event, handler, true);\n\t  } else {\n\t    el['on' + event] = handler;\n\t  }\n\t}\n\t\n\tfunction removeEvent(el, event, handler) {\n\t  if (!el) { return; }\n\t  if (el.detachEvent) {\n\t    el.detachEvent('on' + event, handler);\n\t  } else if (el.removeEventListener) {\n\t    el.removeEventListener(event, handler, true);\n\t  } else {\n\t    el['on' + event] = null;\n\t  }\n\t}\n\t\n\tfunction outerHeight(node) {\n\t  // This is deliberately excluding margin for our calculations, since we are using\n\t  // offsetTop which is including margin. See getBoundPosition\n\t  var height = node.clientHeight;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  height += int(computedStyle.borderTopWidth);\n\t  height += int(computedStyle.borderBottomWidth);\n\t  return height;\n\t}\n\t\n\tfunction outerWidth(node) {\n\t  // This is deliberately excluding margin for our calculations, since we are using\n\t  // offsetLeft which is including margin. See getBoundPosition\n\t  var width = node.clientWidth;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  width += int(computedStyle.borderLeftWidth);\n\t  width += int(computedStyle.borderRightWidth);\n\t  return width;\n\t}\n\tfunction innerHeight(node) {\n\t  var height = node.clientHeight;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  height -= int(computedStyle.paddingTop);\n\t  height -= int(computedStyle.paddingBottom);\n\t  return height;\n\t}\n\t\n\tfunction innerWidth(node) {\n\t  var width = node.clientWidth;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  width -= int(computedStyle.paddingLeft);\n\t  width -= int(computedStyle.paddingRight);\n\t  return width;\n\t}\n\t\n\tfunction isNum(num) {\n\t  return typeof num === 'number' && !isNaN(num);\n\t}\n\t\n\tfunction int(a) {\n\t  return parseInt(a, 10);\n\t}\n\t\n\tfunction getBoundPosition(draggable, clientX, clientY) {\n\t  var bounds = JSON.parse(JSON.stringify(draggable.props.bounds));\n\t  var node = draggable.getDOMNode();\n\t  var parent = node.parentNode;\n\t\n\t  if (bounds === 'parent') {\n\t    var nodeStyle = window.getComputedStyle(node);\n\t    var parentStyle = window.getComputedStyle(parent);\n\t    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n\t    bounds = {\n\t      left: -node.offsetLeft + int(parentStyle.paddingLeft) +\n\t            int(nodeStyle.borderLeftWidth) + int(nodeStyle.marginLeft),\n\t      top: -node.offsetTop + int(parentStyle.paddingTop) +\n\t            int(nodeStyle.borderTopWidth) + int(nodeStyle.marginTop),\n\t      right: innerWidth(parent) - outerWidth(node) - node.offsetLeft,\n\t      bottom: innerHeight(parent) - outerHeight(node) - node.offsetTop\n\t    };\n\t  }\n\t\n\t  // Keep x and y below right and bottom limits...\n\t  if (isNum(bounds.right)) clientX = Math.min(clientX, bounds.right);\n\t  if (isNum(bounds.bottom)) clientY = Math.min(clientY, bounds.bottom);\n\t\n\t  // But above left and top limits.\n\t  if (isNum(bounds.left)) clientX = Math.max(clientX, bounds.left);\n\t  if (isNum(bounds.top)) clientY = Math.max(clientY, bounds.top);\n\t\n\t  return [clientX, clientY];\n\t}\n\t\n\tfunction snapToGrid(grid, pendingX, pendingY) {\n\t  var x = Math.round(pendingX / grid[0]) * grid[0];\n\t  var y = Math.round(pendingY / grid[1]) * grid[1];\n\t  return [x, y];\n\t}\n\t\n\t// Useful for preventing blue highlights all over everything when dragging.\n\tvar userSelectStyle = ';user-select: none;-webkit-user-select:none;-moz-user-select:none;' +\n\t  '-o-user-select:none;-ms-user-select:none;';\n\t\n\tfunction addUserSelectStyles(draggable) {\n\t  if (!draggable.props.enableUserSelectHack) return;\n\t  var style = document.body.getAttribute('style') || '';\n\t  document.body.setAttribute('style', style + userSelectStyle);\n\t}\n\t\n\tfunction removeUserSelectStyles(draggable) {\n\t  if (!draggable.props.enableUserSelectHack) return;\n\t  var style = document.body.getAttribute('style') || '';\n\t  document.body.setAttribute('style', style.replace(userSelectStyle, ''));\n\t}\n\t\n\tfunction createCSSTransform(style) {\n\t  // Replace unitless items with px\n\t  var x = style.x + 'px';\n\t  var y = style.y + 'px';\n\t  return {\n\t    transform: 'translate(' + x + ',' + y + ')',\n\t    WebkitTransform: 'translate(' + x + ',' + y + ')',\n\t    OTransform: 'translate(' + x + ',' + y + ')',\n\t    msTransform: 'translate(' + x + ',' + y + ')',\n\t    MozTransform: 'translate(' + x + ',' + y + ')'\n\t  };\n\t}\n\t\n\t\n\t//\n\t// End Helpers.\n\t//\n\t\n\t//\n\t// Define <Draggable>\n\t//\n\t\n\tmodule.exports = React.createClass({\n\t  displayName: 'Draggable',\n\t\n\t  propTypes: {\n\t    /**\n\t     * `axis` determines which axis the draggable can move.\n\t     *\n\t     * 'both' allows movement horizontally and vertically.\n\t     * 'x' limits movement to horizontal axis.\n\t     * 'y' limits movement to vertical axis.\n\t     *\n\t     * Defaults to 'both'.\n\t     */\n\t    axis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\t\n\t    /**\n\t     * `bounds` determines the range of movement available to the element.\n\t     * Available values are:\n\t     *\n\t     * 'parent' restricts movement within the Draggable's parent node.\n\t     *\n\t     * Alternatively, pass an object with the following properties, all of which are optional:\n\t     *\n\t     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n\t     *\n\t     * All values are in px.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *         return (\n\t     *            <Draggable bounds={{right: 300, bottom: 300}}>\n\t     *              <div>Content</div>\n\t     *           </Draggable>\n\t     *         );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    bounds: React.PropTypes.oneOfType([\n\t      React.PropTypes.shape({\n\t        left: React.PropTypes.Number,\n\t        right: React.PropTypes.Number,\n\t        top: React.PropTypes.Number,\n\t        bottom: React.PropTypes.Number\n\t      }),\n\t      React.PropTypes.oneOf(['parent', false])\n\t    ]),\n\t\n\t    /**\n\t     * By default, we add 'user-select:none' attributes to the document body\n\t     * to prevent ugly text selection during drag. If this is causing problems\n\t     * for your app, set this to `false`.\n\t     */\n\t    enableUserSelectHack: React.PropTypes.bool,\n\t\n\t    /**\n\t     * `handle` specifies a selector to be used as the handle that initiates drag.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *         return (\n\t     *            <Draggable handle=\".handle\">\n\t     *              <div>\n\t     *                  <div className=\"handle\">Click me to drag</div>\n\t     *                  <div>This is some other content</div>\n\t     *              </div>\n\t     *           </Draggable>\n\t     *         );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    handle: React.PropTypes.string,\n\t\n\t    /**\n\t     * `cancel` specifies a selector to be used to prevent drag initialization.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *           return(\n\t     *               <Draggable cancel=\".cancel\">\n\t     *                   <div>\n\t     *                     <div className=\"cancel\">You can't drag from here</div>\n\t     *            <div>Dragging here works fine</div>\n\t     *                   </div>\n\t     *               </Draggable>\n\t     *           );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    cancel: React.PropTypes.string,\n\t\n\t    /**\n\t     * `grid` specifies the x and y that dragging should snap to.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *           return (\n\t     *               <Draggable grid={[25, 25]}>\n\t     *                   <div>I snap to a 25 x 25 grid</div>\n\t     *               </Draggable>\n\t     *           );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    grid: React.PropTypes.arrayOf(React.PropTypes.number),\n\t\n\t    /**\n\t     * `start` specifies the x and y that the dragged item should start at\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *      var App = React.createClass({\n\t     *          render: function () {\n\t     *              return (\n\t     *                  <Draggable start={{x: 25, y: 25}}>\n\t     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n\t     *                  </Draggable>\n\t     *              );\n\t     *          }\n\t     *      });\n\t     * ```\n\t     */\n\t    start: React.PropTypes.shape({\n\t      x: React.PropTypes.number,\n\t      y: React.PropTypes.number\n\t    }),\n\t\n\t    /**\n\t     * `moveOnStartChange`, if true (default false) will move the element if the `start`\n\t     * property changes.\n\t     */\n\t    moveOnStartChange: React.PropTypes.bool,\n\t\n\t\n\t    /**\n\t     * `zIndex` specifies the zIndex to use while dragging.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *           return (\n\t     *               <Draggable zIndex={100}>\n\t     *                   <div>I have a zIndex</div>\n\t     *               </Draggable>\n\t     *           );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    zIndex: React.PropTypes.number,\n\t\n\t    /**\n\t     * Called when dragging starts.\n\t     * If this function returns the boolean false, dragging will be canceled.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```js\n\t     *  function (event, ui) {}\n\t     * ```\n\t     *\n\t     * `event` is the Event that was triggered.\n\t     * `ui` is an object:\n\t     *\n\t     * ```js\n\t     *  {\n\t     *    position: {top: 0, left: 0}\n\t     *  }\n\t     * ```\n\t     */\n\t    onStart: React.PropTypes.func,\n\t\n\t    /**\n\t     * Called while dragging.\n\t     * If this function returns the boolean false, dragging will be canceled.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```js\n\t     *  function (event, ui) {}\n\t     * ```\n\t     *\n\t     * `event` is the Event that was triggered.\n\t     * `ui` is an object:\n\t     *\n\t     * ```js\n\t     *  {\n\t     *    position: {top: 0, left: 0}\n\t     *  }\n\t     * ```\n\t     */\n\t    onDrag: React.PropTypes.func,\n\t\n\t    /**\n\t     * Called when dragging stops.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```js\n\t     *  function (event, ui) {}\n\t     * ```\n\t     *\n\t     * `event` is the Event that was triggered.\n\t     * `ui` is an object:\n\t     *\n\t     * ```js\n\t     *  {\n\t     *    position: {top: 0, left: 0}\n\t     *  }\n\t     * ```\n\t     */\n\t    onStop: React.PropTypes.func,\n\t\n\t    /**\n\t     * A workaround option which can be passed if onMouseDown needs to be accessed,\n\t     * since it'll always be blocked (due to that there's internal use of onMouseDown)\n\t     */\n\t    onMouseDown: React.PropTypes.func,\n\t  },\n\t\n\t  componentWillReceiveProps: function(newProps) {\n\t    // React to changes in the 'start' param.\n\t    if (newProps.moveOnStartChange && newProps.start) {\n\t      this.setState(this.getInitialState(newProps));\n\t    }\n\t  },\n\t\n\t  componentWillUnmount: function() {\n\t    // Remove any leftover event handlers\n\t    removeEvent(document, dragEventFor['move'], this.handleDrag);\n\t    removeEvent(document, dragEventFor['end'], this.handleDragEnd);\n\t    removeUserSelectStyles(this);\n\t  },\n\t\n\t  getDefaultProps: function () {\n\t    return {\n\t      axis: 'both',\n\t      bounds: false,\n\t      handle: null,\n\t      cancel: null,\n\t      grid: null,\n\t      moveOnStartChange: false,\n\t      start: {x: 0, y: 0},\n\t      zIndex: NaN,\n\t      enableUserSelectHack: true,\n\t      onStart: emptyFunction,\n\t      onDrag: emptyFunction,\n\t      onStop: emptyFunction,\n\t      onMouseDown: emptyFunction\n\t    };\n\t  },\n\t\n\t  getInitialState: function (props) {\n\t    // Handle call from CWRP\n\t    props = props || this.props;\n\t    return {\n\t      // Whether or not we are currently dragging.\n\t      dragging: false,\n\t\n\t      // Offset between start top/left and mouse top/left while dragging.\n\t      offsetX: 0, offsetY: 0,\n\t\n\t      // Current transform x and y.\n\t      clientX: props.start.x, clientY: props.start.y\n\t    };\n\t  },\n\t\n\t  handleDragStart: function (e) {\n\t    // Make it possible to attach event handlers on top of this one\n\t    this.props.onMouseDown(e);\n\t\n\t    // Short circuit if handle or cancel prop was provided and selector doesn't match\n\t    if ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n\t      (this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n\t      return;\n\t    }\n\t\n\t    // Call event handler. If it returns explicit false, cancel.\n\t    var shouldStart = this.props.onStart(e, createUIEvent(this));\n\t    if (shouldStart === false) return;\n\t\n\t    var dragPoint = getControlPosition(e);\n\t\n\t    // Add a style to the body to disable user-select. This prevents text from\n\t    // being selected all over the page.\n\t    addUserSelectStyles(this);\n\t\n\t    // Initiate dragging. Set the current x and y as offsets\n\t    // so we know how much we've moved during the drag. This allows us\n\t    // to drag elements around even if they have been moved, without issue.\n\t    this.setState({\n\t      dragging: true,\n\t      offsetX: dragPoint.clientX - this.state.clientX,\n\t      offsetY: dragPoint.clientY - this.state.clientY\n\t    });\n\t\n\t\n\t    // Add event handlers\n\t    addEvent(document, dragEventFor['move'], this.handleDrag);\n\t    addEvent(document, dragEventFor['end'], this.handleDragEnd);\n\t  },\n\t\n\t  handleDragEnd: function (e) {\n\t    // Short circuit if not currently dragging\n\t    if (!this.state.dragging) {\n\t      return;\n\t    }\n\t\n\t    removeUserSelectStyles(this);\n\t\n\t    // Turn off dragging\n\t    this.setState({\n\t      dragging: false\n\t    });\n\t\n\t    // Call event handler\n\t    this.props.onStop(e, createUIEvent(this));\n\t\n\t    // Remove event handlers\n\t    removeEvent(document, dragEventFor['move'], this.handleDrag);\n\t    removeEvent(document, dragEventFor['end'], this.handleDragEnd);\n\t  },\n\t\n\t  handleDrag: function (e) {\n\t    var dragPoint = getControlPosition(e);\n\t\n\t    // Calculate X and Y\n\t    var clientX = dragPoint.clientX - this.state.offsetX;\n\t    var clientY = dragPoint.clientY - this.state.offsetY;\n\t\n\t    // Snap to grid if prop has been provided\n\t    if (Array.isArray(this.props.grid)) {\n\t      var coords = snapToGrid(this.props.grid, clientX, clientY);\n\t      clientX = coords[0], clientY = coords[1];\n\t    }\n\t\n\t    if (this.props.bounds) {\n\t      var pos = getBoundPosition(this, clientX, clientY);\n\t      clientX = pos[0], clientY = pos[1];\n\t    }\n\t\n\t    // Call event handler. If it returns explicit false, cancel.\n\t    var shouldUpdate = this.props.onDrag(e, createUIEvent(this));\n\t    if (shouldUpdate === false) return this.handleDragEnd();\n\t\n\t    // Update transform\n\t    this.setState({\n\t      clientX: clientX,\n\t      clientY: clientY\n\t    });\n\t  },\n\t\n\t  onMouseDown: function(ev) {\n\t    // Prevent 'ghost click' which happens 300ms after touchstart if the event isn't cancelled.\n\t    // We don't cancel the event on touchstart because of #37; we might want to make a scrollable item draggable.\n\t    // More on ghost clicks: http://ariatemplates.com/blog/2014/05/ghost-clicks-in-mobile-browsers/\n\t    if (dragEventFor == eventsFor['touch']) {\n\t      return ev.preventDefault();\n\t    }\n\t\n\t    return this.handleDragStart.apply(this, arguments);\n\t  },\n\t\n\t  onTouchStart: function(ev) {\n\t    // We're on a touch device now, so change the event handlers\n\t    dragEventFor = eventsFor['touch'];\n\t\n\t    return this.handleDragStart.apply(this, arguments);\n\t  },\n\t\n\t  // Intended for use by a parent component. Resets internal state on this component. Useful for\n\t  // <Resizable> and other components in case this element is manually resized and start/moveOnStartChange\n\t  // don't work for you.\n\t  resetState: function() {\n\t    this.setState({\n\t      offsetX: 0, offsetY: 0, clientX: 0, clientY: 0\n\t    });\n\t  },\n\t\n\t  render: function () {\n\t    // Create style object. We extend from existing styles so we don't\n\t    // remove anything already set (like background, color, etc).\n\t    var childStyle = this.props.children.props.style || {};\n\t\n\t    // Add a CSS transform to move the element around. This allows us to move the element around\n\t    // without worrying about whether or not it is relatively or absolutely positioned.\n\t    // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n\t    // has a clean slate.\n\t    var transform = createCSSTransform({\n\t      // Set left if horizontal drag is enabled\n\t      x: canDragX(this) ?\n\t        this.state.clientX :\n\t        0,\n\t\n\t      // Set top if vertical drag is enabled\n\t      y: canDragY(this) ?\n\t        this.state.clientY :\n\t        0\n\t    });\n\t\n\t    // Workaround IE pointer events; see #51\n\t    // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278\n\t    var touchHacks = {\n\t      touchAction: 'none'\n\t    };\n\t\n\t    var style = assign({}, childStyle, transform, touchHacks);\n\t\n\t    // Set zIndex if currently dragging and prop has been provided\n\t    if (this.state.dragging && !isNaN(this.props.zIndex)) {\n\t      style.zIndex = this.props.zIndex;\n\t    }\n\t\n\t    var className = classNames((this.props.children.props.className || ''), 'react-draggable', {\n\t      'react-draggable-dragging': this.state.dragging,\n\t      'react-draggable-dragged': this.state.dragged\n\t    });\n\t\n\t    // Reuse the child provided\n\t    // This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t    return React.cloneElement(React.Children.only(this.props.children), {\n\t      style: style,\n\t      className: className,\n\t\n\t      onMouseDown: this.onMouseDown,\n\t      onTouchStart: this.onTouchStart,\n\t      onMouseUp: this.handleDragEnd,\n\t      onTouchEnd: this.handleDragEnd\n\t    });\n\t  }\n\t});\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t  Copyright (c) 2015 Jed Watson.\n\t  Licensed under the MIT License (MIT), see\n\t  http://jedwatson.github.io/classnames\n\t*/\n\t\n\tfunction classNames() {\n\t\tvar classes = '';\n\t\tvar arg;\n\t\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\targ = arguments[i];\n\t\t\tif (!arg) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\tif ('string' === typeof arg || 'number' === typeof arg) {\n\t\t\t\tclasses += ' ' + arg;\n\t\t\t} else if (Object.prototype.toString.call(arg) === '[object Array]') {\n\t\t\t\tclasses += ' ' + classNames.apply(null, arg);\n\t\t\t} else if ('object' === typeof arg) {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (!arg.hasOwnProperty(key) || !arg[key]) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tclasses += ' ' + key;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn classes.substr(1);\n\t}\n\t\n\t// safely export classNames for node / browserify\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t}\n\t\n\t// safely export classNames for RequireJS\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\treturn classNames;\n\t\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };\n\t\n\tvar _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } };\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar React = __webpack_require__(1);\n\tvar Resizable = __webpack_require__(9);\n\tvar PureRenderMixin = __webpack_require__(5);\n\t\n\t// An example use of Resizable.\n\tvar ResizableBox = module.exports = React.createClass({\n\t  displayName: 'ResizableBox',\n\t  mixins: [PureRenderMixin],\n\t\n\t  propTypes: {\n\t    lockAspectRatio: React.PropTypes.bool\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      lockAspectRatio: false,\n\t      handleSize: [20, 20],\n\t      minConstraints: [20, 20]\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      width: this.props.width,\n\t      height: this.props.height,\n\t      aspectRatio: this.props.width / this.props.height\n\t    };\n\t  },\n\t\n\t  onResize: function onResize(event, _ref) {\n\t    var element = _ref.element;\n\t    var size = _ref.size;\n\t    var width = size.width;\n\t    var height = size.height;\n\t\n\t    var widthChanged = width !== this.state.width,\n\t        heightChanged = height !== this.state.height;\n\t    if (!widthChanged && !heightChanged) {\n\t      return;\n\t    }if (this.props.lockAspectRatio) {\n\t      var _preserveAspectRatio = this.preserveAspectRatio(width, height);\n\t\n\t      var _preserveAspectRatio2 = _slicedToArray(_preserveAspectRatio, 2);\n\t\n\t      width = _preserveAspectRatio2[0];\n\t      height = _preserveAspectRatio2[1];\n\t    }\n\t\n\t    this.setState({\n\t      width: width,\n\t      height: height\n\t    });\n\t  },\n\t\n\t  // If you do this, be careful of constraints\n\t  preserveAspectRatio: function preserveAspectRatio(width, height) {\n\t    var min = this.props.minConstraints;\n\t    var max = this.props.maxConstraints;\n\t\n\t    height = width / this.state.aspectRatio;\n\t    width = height * this.state.aspectRatio;\n\t\n\t    if (min) {\n\t      width = Math.max(min[0], width);\n\t      height = Math.max(min[1], height);\n\t    }\n\t    if (max) {\n\t      width = Math.min(max[0], width);\n\t      height = Math.min(max[1], height);\n\t    }\n\t    return [width, height];\n\t  },\n\t\n\t  render: function render() {\n\t    // Basic wrapper around a Resizable instance.\n\t    // If you use Resizable directly, you are responsible for updating the component\n\t    // with a new width and height.\n\t    var _props = this.props;\n\t    var handleSize = _props.handleSize;\n\t    var minConstraints = _props.minConstraints;\n\t    var maxConstraints = _props.maxConstraints;\n\t\n\t    var props = _objectWithoutProperties(_props, ['handleSize', 'minConstraints', 'maxConstraints']);\n\t\n\t    return React.createElement(\n\t      Resizable,\n\t      {\n\t        minConstraints: minConstraints,\n\t        maxConstraints: maxConstraints,\n\t        handleSize: handleSize,\n\t        width: this.state.width,\n\t        height: this.state.height,\n\t        onResize: this.onResize,\n\t        draggableOpts: this.props.draggableOpts\n\t      },\n\t      React.createElement(\n\t        'div',\n\t        _extends({ style: { width: this.state.width + 'px', height: this.state.height + 'px' } }, props),\n\t        this.props.children\n\t      )\n\t    );\n\t  }\n\t});\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tmodule.exports = function() {\n\t  throw new Error(\"Don't instantiate Resizable directly! Use require('react-resizable').Resizable\");\n\t};\n\t\n\tmodule.exports.Resizable = __webpack_require__(9);\n\tmodule.exports.ResizableBox = __webpack_require__(19);\n\n\n/***/ },\n/* 21 */\n[25, 22],\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar React = __webpack_require__(1);\n\tvar PureRenderMixin = __webpack_require__(5);\n\tvar emptyFunction = __webpack_require__(23);\n\tvar cloneWithProps = __webpack_require__(6);\n\t\n\tfunction createUIEvent(draggable) {\n\t\treturn {\n\t\t\telement: draggable.getDOMNode(),\n\t\t\tposition: {\n\t\t\t\ttop: (draggable._pendingState || draggable.state).clientY,\n\t\t\t\tleft: (draggable._pendingState || draggable.state).clientX\n\t\t\t}\n\t\t};\n\t}\n\t\n\tfunction canDragY(draggable) {\n\t\treturn draggable.props.axis === 'both' ||\n\t\t\t\tdraggable.props.axis === 'y';\n\t}\n\t\n\tfunction canDragX(draggable) {\n\t\treturn draggable.props.axis === 'both' ||\n\t\t\t\tdraggable.props.axis === 'x';\n\t}\n\t\n\tfunction isFunction(func) {\n\t  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n\t}\n\t\n\t// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\n\tfunction findInArray(array, callback) {\n\t  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {\n\t    if (callback.apply(callback, [element, i, array])) return element;\n\t  }\n\t}\n\t\n\tfunction matchesSelector(el, selector) {\n\t  var method = findInArray([\n\t    'matches',\n\t    'webkitMatchesSelector',\n\t    'mozMatchesSelector',\n\t    'msMatchesSelector',\n\t    'oMatchesSelector'\n\t  ], function(method){\n\t    return isFunction(el[method]);\n\t  });\n\t\n\t  return el[method].call(el, selector);\n\t}\n\t\n\tfunction positionToCSSTransform(style) {\n\t\t// Replace unitless items with px\n\t\tvar x = ('' + style.left).replace(/(\\d)$/, '$1px');\n\t\tvar y = ('' + style.top).replace(/(\\d)$/, '$1px');\n\t\tstyle.transform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.WebkitTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.OTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.msTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.MozTransform = 'translate(' + x + ',' + y + ')';\n\t\tdelete style.left;\n\t\tdelete style.top;\n\t\treturn style;\n\t}\n\t\n\t// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886\n\t/* Conditional to fix node server side rendering of component */\n\tif (typeof window === 'undefined') {\n\t    // Do Node Stuff\n\t    var isTouchDevice = false;\n\t} else {\n\t    // Do Browser Stuff\n\t    var isTouchDevice = 'ontouchstart' in window || // works on most browsers\n\t      'onmsgesturechange' in window; // works on ie10 on ms surface\n\t}\n\t\n\t// look ::handleDragStart\n\t//function isMultiTouch(e) {\n\t//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1\n\t//}\n\t\n\t/**\n\t * simple abstraction for dragging events names\n\t * */\n\tvar dragEventFor = (function () {\n\t  var eventsFor = {\n\t    touch: {\n\t      start: 'touchstart',\n\t      move: 'touchmove',\n\t      end: 'touchend'\n\t    },\n\t    mouse: {\n\t      start: 'mousedown',\n\t      move: 'mousemove',\n\t      end: 'mouseup'\n\t    }\n\t  };\n\t  return eventsFor[isTouchDevice ? 'touch' : 'mouse'];\n\t})();\n\t\n\t/**\n\t * get {clientX, clientY} positions of control\n\t * */\n\tfunction getControlPosition(e) {\n\t  var position = (e.touches && e.touches[0]) || e;\n\t  return {\n\t    clientX: position.clientX,\n\t    clientY: position.clientY\n\t  };\n\t}\n\t\n\tfunction addEvent(el, event, handler) {\n\t\tif (!el) { return; }\n\t\tif (el.attachEvent) {\n\t\t\tel.attachEvent('on' + event, handler);\n\t\t} else if (el.addEventListener) {\n\t\t\tel.addEventListener(event, handler, true);\n\t\t} else {\n\t\t\tel['on' + event] = handler;\n\t\t}\n\t}\n\t\n\tfunction removeEvent(el, event, handler) {\n\t\tif (!el) { return; }\n\t\tif (el.detachEvent) {\n\t\t\tel.detachEvent('on' + event, handler);\n\t\t} else if (el.removeEventListener) {\n\t\t\tel.removeEventListener(event, handler, true);\n\t\t} else {\n\t\t\tel['on' + event] = null;\n\t\t}\n\t}\n\t\n\tmodule.exports = React.createClass({\n\t\tdisplayName: 'Draggable',\n\t\tmixins: [PureRenderMixin],\n\t\n\t\tpropTypes: {\n\t\t\t/**\n\t\t\t * `axis` determines which axis the draggable can move.\n\t\t\t *\n\t\t\t * 'both' allows movement horizontally and vertically.\n\t\t\t * 'x' limits movement to horizontal axis.\n\t\t\t * 'y' limits movement to vertical axis.\n\t\t\t *\n\t\t\t * Defaults to 'both'.\n\t\t\t */\n\t\t\taxis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\t\n\t\t\t/**\n\t\t\t * `handle` specifies a selector to be used as the handle that initiates drag.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t    \treturn (\n\t\t\t * \t    \t \t<Draggable handle=\".handle\">\n\t\t\t * \t    \t \t  <div>\n\t\t\t * \t    \t \t      <div className=\"handle\">Click me to drag</div>\n\t\t\t * \t    \t \t      <div>This is some other content</div>\n\t\t\t * \t    \t \t  </div>\n\t\t\t * \t    \t\t</Draggable>\n\t\t\t * \t    \t);\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\thandle: React.PropTypes.string,\n\t\n\t\t\t/**\n\t\t\t * `cancel` specifies a selector to be used to prevent drag initialization.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return(\n\t\t\t * \t            <Draggable cancel=\".cancel\">\n\t\t\t * \t                <div>\n\t\t\t * \t                \t<div className=\"cancel\">You can't drag from here</div>\n\t\t\t *\t\t\t\t\t\t<div>Dragging here works fine</div>\n\t\t\t * \t                </div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tcancel: React.PropTypes.string,\n\t\n\t\t\t/**\n\t\t\t * `grid` specifies the x and y that dragging should snap to.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable grid={[25, 25]}>\n\t\t\t * \t                <div>I snap to a 25 x 25 grid</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tgrid: React.PropTypes.arrayOf(React.PropTypes.number),\n\t\n\t\t\t/**\n\t\t\t * `start` specifies the x and y that the dragged item should start at\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable start={{x: 25, y: 25}}>\n\t\t\t * \t                <div>I start with left: 25px; top: 25px;</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tstart: React.PropTypes.object,\n\t\n\t\t\t/**\n\t\t\t * `moveOnStartChange` tells the Draggable element to reset its position\n\t\t\t * if the `start` parameters are changed. By default, if the `start` \n\t\t\t * parameters change, the Draggable element still remains where it started\n\t\t\t * or was dragged to.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t\t\tonButtonClick: function () {\n\t\t\t * \t\t\t\tthis.setState({clicked: true});\n\t\t\t * \t\t\t},\n\t\t\t * \t    render: function () {\n\t\t\t * \t    \t\tvar start = this.state.clicked ?\n\t\t\t * \t    \t\t  {x: 25, y: 25} :\n\t\t\t * \t    \t\t  {x: 125, y: 125};\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable start={start}>\n\t\t\t * \t                <div>I start with left: 25px; top: 25px;,\n\t\t\t * \t                but move to left: 125px; top: 125px; when the button\n\t\t\t * \t                is clicked.</div>\n\t\t\t * \t                <div onClick={this.onButtonClick}>Button</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tmoveOnStartChange: React.PropTypes.bool,\n\t\n\t\t\t/**\n\t\t\t * `useCSSTransforms` if true will place the element using translate(x, y)\n\t\t\t * rather than CSS top/left.\n\t\t\t *\n\t\t\t * This generally gives better performance, and is useful in combination with\n\t\t\t * other layout systems that use translate(), such as react-grid-layout.\n\t\t\t */\n\t\t\tuseCSSTransforms: React.PropTypes.bool,\n\t\n\t\t\t/**\n\t\t\t * `zIndex` specifies the zIndex to use while dragging.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable zIndex={100}>\n\t\t\t * \t                <div>I have a zIndex</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tzIndex: React.PropTypes.number,\n\t\n\t\t\t/**\n\t\t\t * Called when dragging starts.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonStart: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * Called while dragging.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonDrag: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * Called when dragging stops.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonStop: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * A workaround option which can be passed if onMouseDown needs to be accessed, \n\t\t\t * since it'll always be blocked (due to that there's internal use of onMouseDown)\n\t\t\t *\n\t\t\t */\n\t\t\tonMouseDown: React.PropTypes.func\n\t\t},\n\t\n\t\tcomponentWillUnmount: function() {\n\t\t\t// Remove any leftover event handlers\n\t\t\tremoveEvent(window, dragEventFor['move'], this.handleDrag);\n\t\t\tremoveEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\tcomponentWillReceiveProps: function(nextProps) {\n\t\t\t// If this is set to watch a changing start position, \n\t\t\t// set x and y to the new position.\n\t\t\tif (nextProps.moveOnStartChange) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tclientX: nextProps.start.x,\n\t\t\t\t\tclientY: nextProps.start.y\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\n\t\tgetDefaultProps: function () {\n\t\t\treturn {\n\t\t\t\taxis: 'both',\n\t\t\t\thandle: null,\n\t\t\t\tcancel: null,\n\t\t\t\tgrid: null,\n\t\t\t\tstart: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0\n\t\t\t\t},\n\t\t\t\tmoveOnStartChange: false,\n\t\t\t\tuseCSSTransforms: false,\n\t\t\t\tzIndex: NaN,\n\t\t\t\tonStart: emptyFunction,\n\t\t\t\tonDrag: emptyFunction,\n\t\t\t\tonStop: emptyFunction,\n\t\t\t\tonMouseDown: emptyFunction\n\t\t\t};\n\t\t},\n\t\n\t\tgetInitialState: function () {\n\t\t\treturn {\n\t\t\t\t// Whether or not currently dragging\n\t\t\t\tdragging: false,\n\t\n\t\t\t\t// Start top/left of this.getDOMNode()\n\t\t\t\tstartX: 0, startY: 0,\n\t\n\t\t\t\t// Offset between start top/left and mouse top/left\n\t\t\t\toffsetX: 0, offsetY: 0,\n\t\n\t\t\t\t// Current top/left of this.getDOMNode()\n\t\t\t\tclientX: this.props.start.x, clientY: this.props.start.y\n\t\t\t};\n\t\t},\n\t\n\t\thandleDragStart: function (e) {\n\t    // todo: write right implementation to prevent multitouch drag\n\t    // prevent multi-touch events\n\t    // if (isMultiTouch(e)) {\n\t    //     this.handleDragEnd.apply(e, arguments);\n\t    //     return\n\t    // }\n\t\n\t\t\t// Make it possible to attach event handlers on top of this one\n\t\t\tthis.props.onMouseDown(e);\n\t\n\t\t\t// Only catch left clicks, if clicking\n\t\t\tif (typeof e.button === \"number\" && e.button !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar node = this.getDOMNode();\n\t\n\t\t\t// Short circuit if handle or cancel prop was provided and selector doesn't match\n\t\t\tif ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n\t\t\t\t(this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t    var dragPoint = getControlPosition(e);\n\t\n\t\t\t// Initiate dragging\n\t\t\tthis.setState({\n\t\t\t\tdragging: true,\n\t\t\t\toffsetX: parseInt(dragPoint.clientX, 10),\n\t\t\t\toffsetY: parseInt(dragPoint.clientY, 10),\n\t\t\t\tstartX: parseInt(this.state.clientX, 10) || 0,\n\t\t\t\tstartY: parseInt(this.state.clientY, 10) || 0\n\t\t\t});\n\t\n\t\t\t// Add a class to the body to disable user-select. This prevents text from \n\t\t\t// being selected all over the page.\n\t\t\tdocument.body.className += \" react-draggable-active\";\n\t\n\t\t\t// Call event handler\n\t\t\tthis.props.onStart(e, createUIEvent(this));\n\t\n\t\t\t// Add event handlers\n\t\t\taddEvent(window, dragEventFor['move'], this.handleDrag);\n\t\t\taddEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\thandleDragEnd: function (e) {\n\t\t\t// Short circuit if not currently dragging\n\t\t\tif (!this.state.dragging) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Turn off dragging\n\t\t\tthis.setState({\n\t\t\t\tdragging: false\n\t\t\t});\n\t\n\t\t\t// Remove the body class used to disable user-select.\n\t\t\tdocument.body.className = document.body.className.replace(\" react-draggable-active\", \"\");\n\t\n\t\t\t// Call event handler\n\t\t\tthis.props.onStop(e, createUIEvent(this));\n\t\n\t\t\t// Remove event handlers\n\t    removeEvent(window, dragEventFor['move'], this.handleDrag);\n\t    removeEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\thandleDrag: function (e) {\n\t    var dragPoint = getControlPosition(e);\n\t\n\t\t\t// Calculate top and left\n\t    var clientX = (this.state.startX + (dragPoint.clientX - this.state.offsetX));\n\t    var clientY = (this.state.startY + (dragPoint.clientY - this.state.offsetY));\n\t\n\t\t\t// Snap to grid if prop has been provided\n\t\t\tif (Array.isArray(this.props.grid)) {\n\t\t\t\tvar directionX = clientX < parseInt(this.state.clientX, 10) ? -1 : 1;\n\t\t\t\tvar directionY = clientY < parseInt(this.state.clientY, 10) ? -1 : 1;\n\t\n\t\t\t\tclientX = Math.abs(clientX - parseInt(this.state.clientX, 10)) >= this.props.grid[0]\n\t\t\t\t\t\t? (parseInt(this.state.clientX, 10) + (this.props.grid[0] * directionX))\n\t\t\t\t\t\t: parseInt(this.state.clientX, 10);\n\t\n\t\t\t\tclientY = Math.abs(clientY - parseInt(this.state.clientY, 10)) >= this.props.grid[1]\n\t\t\t\t\t\t? (parseInt(this.state.clientY, 10) + (this.props.grid[1] * directionY))\n\t\t\t\t\t\t: parseInt(this.state.clientY, 10);\n\t\t\t}\n\t\n\t\t\t// Min/max constraints\n\t\t\tif (Array.isArray(this.props.minConstraints)) {\n\t\t\t\tclientX = Math.max(this.props.minConstraints[0], clientX);\n\t\t\t\tclientY = Math.max(this.props.minConstraints[1], clientY);\n\t\t\t}\n\t\t\tif (Array.isArray(this.props.maxConstraints)) {\n\t\t\t\tclientX = Math.min(this.props.maxConstraints[0], clientX);\n\t\t\t\tclientY = Math.min(this.props.maxConstraints[1], clientY);\n\t\t\t}\n\t\n\t\t\t// Update top and left\n\t\t\tthis.setState({\n\t\t\t\tclientX: clientX,\n\t\t\t\tclientY: clientY\n\t\t\t});\n\t\n\t\t\t// Call event handler\n\t\t\tthis.props.onDrag(e, createUIEvent(this));\n\t\t},\n\t\n\t\trender: function () {\n\t\t\tvar style = {\n\t\t\t\t// Set top if vertical drag is enabled\n\t\t\t\ttop: canDragY(this)\n\t\t\t\t\t? this.state.clientY\n\t\t\t\t\t: this.state.startY,\n\t\n\t\t\t\t// Set left if horizontal drag is enabled\n\t\t\t\tleft: canDragX(this)\n\t\t\t\t\t? this.state.clientX\n\t\t\t\t\t: this.state.startX\n\t\t\t};\n\t\n\t\t\tif (this.props.useCSSTransforms) {\n\t\t\t\tstyle = positionToCSSTransform(style);\n\t\t\t}\n\t\n\t\t\t// Set zIndex if currently dragging and prop has been provided\n\t\t\tif (this.state.dragging && !isNaN(this.props.zIndex)) {\n\t\t\t\tstyle.zIndex = this.props.zIndex;\n\t\t\t}\n\t\n\t\t\t// Reuse the child provided\n\t\t\t// This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t\t\treturn cloneWithProps(React.Children.only(this.props.children), {\n\t\t\t\tstyle: style,\n\t\t\t\tclassName: 'react-draggable' + (this.state.dragging ? ' react-draggable-dragging' : ''),\n\t\n\t\t\t\tonMouseDown: this.handleDragStart,\n\t\t\t\tonTouchStart: function(ev){\n\t        ev.preventDefault(); // prevent for scroll\n\t        return this.handleDragStart.apply(this, arguments);\n\t      }.bind(this),\n\t\n\t\t\t\tonMouseUp: this.handleDragEnd,\n\t\t\t\tonTouchEnd: this.handleDragEnd\n\t\t\t});\n\t\t}\n\t});\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule emptyFunction\n\t */\n\t\n\tfunction makeEmptyFunction(arg) {\n\t  return function() {\n\t    return arg;\n\t  };\n\t}\n\t\n\t/**\n\t * This function accepts and discards inputs; it has no side effects. This is\n\t * primarily useful idiomatically for overridable function endpoints which\n\t * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n\t */\n\tfunction emptyFunction() {}\n\t\n\temptyFunction.thatReturns = makeEmptyFunction;\n\temptyFunction.thatReturnsFalse = makeEmptyFunction(false);\n\temptyFunction.thatReturnsTrue = makeEmptyFunction(true);\n\temptyFunction.thatReturnsNull = makeEmptyFunction(null);\n\temptyFunction.thatReturnsThis = function() { return this; };\n\temptyFunction.thatReturnsArgument = function(arg) { return arg; };\n\t\n\tmodule.exports = emptyFunction;\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule shallowEqual\n\t */\n\t\n\t'use strict';\n\t\n\t/**\n\t * Performs equality by iterating through keys on an object and returning\n\t * false when any key has values which are not strictly equal between\n\t * objA and objB. Returns true when the values of all keys are strictly equal.\n\t *\n\t * @return {boolean}\n\t */\n\tfunction shallowEqual(objA, objB) {\n\t  if (objA === objB) {\n\t    return true;\n\t  }\n\t  var key;\n\t  // Test for A's keys different from B.\n\t  for (key in objA) {\n\t    if (objA.hasOwnProperty(key) &&\n\t        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n\t      return false;\n\t    }\n\t  }\n\t  // Test for B's keys missing from A.\n\t  for (key in objB) {\n\t    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t}\n\t\n\tmodule.exports = shallowEqual;\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {\n\n\tmodule.exports = __webpack_require__(__webpack_module_template_argument_0__);\n\n\n/***/ }\n/******/ ])))\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** react-grid-layout.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8bd0bfd5cbbb47e1cf1e\n **/","module.exports = require('./lib/ReactGridLayout');\nmodule.exports.Responsive = require('./lib/ResponsiveReactGridLayout');\n\n\n\n/** WEBPACK FOOTER **\n ** ./index-dev.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar assign = require('object-assign');\n\nvar utils = module.exports = {\n\n  /**\n   * Return the bottom coordinate of the layout.\n   *\n   * @param  {Array} layout Layout array.\n   * @return {Number}       Bottom coordinate.\n   */\n  bottom(layout) {\n    var max = 0, bottomY;\n    for (var i = 0, len = layout.length; i < len; i++) {\n      bottomY = layout[i].y + layout[i].h;\n      if (bottomY > max) max = bottomY;\n    }\n    return max;\n  },\n\n  /**\n   * Clones a shallow object.\n   * @param  {Object} obj Object to clone.\n   * @return {Object}   Cloned object.\n   */\n  clone(obj) {\n    return assign({}, obj);\n  },\n\n  /**\n   * Given two layouts, check if they collide.\n   *\n   * @param  {Object} l1 Layout object.\n   * @param  {Object} l2 Layout object.\n   * @return {Boolean}   True if colliding.\n   */\n  collides(l1, l2) {\n    if (l1 === l2) return false; // same element\n    if (l1.x + l1.w <= l2.x) return false; // l1 is left of l2\n    if (l1.x >= l2.x + l2.w) return false; // l1 is right of l2\n    if (l1.y + l1.h <= l2.y) return false; // l1 is above l2\n    if (l1.y >= l2.y + l2.h) return false; // l1 is below l2\n    return true; // boxes overlap\n  },\n\n  /**\n   * Given a layout, compact it. This involves going down each y coordinate and removing gaps\n   * between items.\n   *\n   * @param  {Array} layout Layout.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}       Compacted Layout.\n   */\n  compact(layout, verticalCompact) {\n    // Statics go in the compareWith array right away so items flow around them.\n    var compareWith = utils.getStatics(layout), out = [];\n    // We go through the items by row and column.\n    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\n    for (var i = 0, len = sorted.length; i < len; i++) {\n      var l = sorted[i];\n\n      // Don't move static elements\n      if (!l.static) {\n        l = utils.compactItem(compareWith, l, verticalCompact);\n\n        // Add to comparison array. We only collide with items before this one.\n        // Statics are already in this array.\n        compareWith.push(l);\n      }\n\n      // Add to output array to make sure they still come out in the right order.\n      out[layout.indexOf(l)] = l;\n\n      // Clear moved flag, if it exists.\n      delete l.moved;\n    }\n\n    return out;\n  },\n\n  compactItem(compareWith, l, verticalCompact) {\n    if (verticalCompact) {\n      // Move the element up as far as it can go without colliding.\n      while (l.y > 0 && !utils.getFirstCollision(compareWith, l)) {\n        l.y--;\n      }\n    }\n\n    // Move it down, and keep moving it down if it's colliding.\n    var collides;\n    while((collides = utils.getFirstCollision(compareWith, l))) {\n      l.y = collides.y + collides.h;\n    }\n    return l;\n  },\n\n  /**\n   * Given a layout, make sure all elements fit within its bounds.\n   *\n   * @param  {Array} layout Layout array.\n   * @param  {Number} bounds Number of columns.\n   * @return {[type]}        [description]\n   */\n  correctBounds(layout, bounds) {\n    var collidesWith = utils.getStatics(layout);\n    for (var i = 0, len = layout.length; i < len; i++) {\n      var l = layout[i];\n      // Overflows right\n      if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;\n      // Overflows left\n      if (l.x < 0) {\n        l.x = 0;\n        l.w = bounds.cols;\n      }\n      if (!l.static) collidesWith.push(l);\n      else {\n        // If this is static and collides with other statics, we must move it down.\n        // We have to do something nicer than just letting them overlap.\n        while(utils.getFirstCollision(collidesWith, l)) {\n          l.y++;\n        }\n      }\n\n    }\n    return layout;\n  },\n\n  /**\n   * Get a layout item by ID. Used so we can override later on if necessary.\n   *\n   * @param  {Array}  layout Layout array.\n   * @param  {Number} id     ID\n   * @return {LayoutItem}    Item at ID.\n   */\n  getLayoutItem(layout, id) {\n    id = \"\" + id;\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (\"\" + layout[i].i === id) return layout[i];\n    }\n  },\n\n  /**\n   * Returns the first item this layout collides with.\n   * It doesn't appear to matter which order we approach this from, although\n   * perhaps that is the wrong thing to do.\n   *\n   * @param  {Object} layoutItem Layout item.\n   * @return {Object|undefined}  A colliding layout item, or undefined.\n   */\n  getFirstCollision(layout, layoutItem) {\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (utils.collides(layout[i], layoutItem)) return layout[i];\n    }\n  },\n\n  getAllCollisions(layout, layoutItem) {\n    var out = [];\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (utils.collides(layout[i], layoutItem)) out.push(layout[i]);\n    }\n    return out;\n  },\n\n  /**\n   * Get all static elements.\n   * @param  {Array} layout Array of layout objects.\n   * @return {Array}        Array of static layout items..\n   */\n  getStatics(layout) {\n    var out = [];\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (layout[i].static) out.push(layout[i]);\n    }\n    return out;\n  },\n\n  /**\n   * Move an element. Responsible for doing cascading movements of other elements.\n   *\n   * @param  {Array}      layout Full layout to modify.\n   * @param  {LayoutItem} l      element to move.\n   * @param  {Number}     [x]    X position in grid units.\n   * @param  {Number}     [y]    Y position in grid units.\n   * @param  {Boolean}    [isUserAction] If true, designates that the item we're moving is\n   *                                     being dragged/resized by th euser.\n   */\n  moveElement(layout, l, x, y, isUserAction) {\n    if (l.static) return layout;\n\n    // Short-circuit if nothing to do.\n    if (l.y === y && l.x === x) return layout;\n\n    var movingUp = l.y > y;\n    // This is quite a bit faster than extending the object\n    if (x !== undefined) l.x = x;\n    if (y !== undefined) l.y = y;\n    l.moved = true;\n\n    // If this collides with anything, move it.\n    // When doing this comparison, we have to sort the items we compare with\n    // to ensure, in the case of multiple collisions, that we're getting the\n    // nearest collision.\n    var sorted = utils.sortLayoutItemsByRowCol(layout);\n    if (movingUp) sorted = sorted.reverse();\n    var collisions = utils.getAllCollisions(sorted, l);\n\n    // Move each item that collides away from this element.\n    for (var i = 0, len = collisions.length; i < len; i++) {\n      var collision = collisions[i];\n      // console.log('resolving collision between', l.i, 'at', l.y, 'and', collision.i, 'at', collision.y);\n\n      // Short circuit so we can't infinite loop\n      if (collision.moved) continue;\n\n      // This makes it feel a bit more precise by waiting to swap for just a bit when moving up.\n      if (l.y > collision.y && l.y - collision.y > collision.h / 4) continue;\n\n      // Don't move static items - we have to move *this* element away\n      if (collision.static) {\n        layout = utils.moveElementAwayFromCollision(layout, collision, l, isUserAction);\n      } else {\n        layout = utils.moveElementAwayFromCollision(layout, l, collision, isUserAction);\n      }\n    }\n\n    return layout;\n  },\n\n  /**\n   * This is where the magic needs to happen - given a collision, move an element away from the collision.\n   * We attempt to move it up if there's room, otherwise it goes below.\n   *\n   * @param  {Array} layout            Full layout to modify.\n   * @param  {LayoutItem} collidesWith Layout item we're colliding with.\n   * @param  {LayoutItem} itemToMove   Layout item we're moving.\n   * @param  {Boolean} [isUserAction]  If true, designates that the item we're moving is being dragged/resized\n   *                                   by the user.\n   */\n  moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction) {\n\n    // If there is enough space above the collision to put this element, move it there.\n    // We only do this on the main collision as this can get funky in cascades and cause\n    // unwanted swapping behavior.\n    if (isUserAction) {\n      // Make a mock item so we don't modify the item here, only modify in moveElement.\n      var fakeItem = {\n        x: itemToMove.x,\n        y: itemToMove.y,\n        w: itemToMove.w,\n        h: itemToMove.h\n      };\n      fakeItem.y = Math.max(collidesWith.y - itemToMove.h, 0);\n      if (!utils.getFirstCollision(layout, fakeItem)) {\n        return utils.moveElement(layout, itemToMove, undefined, fakeItem.y);\n      }\n    }\n\n    // Previously this was optimized to move below the collision directly, but this can cause problems\n    // with cascading moves, as an item may actually leapflog a collision and cause a reversal in order.\n    return utils.moveElement(layout, itemToMove, undefined, itemToMove.y + 1);\n  },\n\n  /**\n   * Helper to convert a number to a percentage string.\n   *\n   * @param  {Number} num Any number\n   * @return {String}     That number as a percentage.\n   */\n  perc(num) {\n    return num * 100 + '%';\n  },\n\n  setTransform(style, coords) {\n    // Replace unitless items with px\n    var x = ('' + coords[0]).replace(/(\\d)$/, '$1px');\n    var y = ('' + coords[1]).replace(/(\\d)$/, '$1px');\n    style.transform = \"translate(\" + x + \",\" + y + \")\";\n    style.WebkitTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.MozTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.msTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.OTransform = \"translate(\" + x + \",\" + y + \")\";\n    return style;\n  },\n\n  /**\n   * Get layout items sorted from top left to right and down.\n   *\n   * @return {Array} Array of layout objects.\n   * @return {Array}        Layout, sorted static items first.\n   */\n  sortLayoutItemsByRowCol(layout) {\n    return [].concat(layout).sort(function(a, b) {\n      if (a.y > b.y || (a.y === b.y && a.x > b.x)) {\n        return 1;\n      }\n      return -1;\n    });\n  },\n\n  /**\n   * Generate a layout using the initialLayout and children as a template.\n   * Missing entries will be added, extraneous ones will be truncated.\n   *\n   * @param  {Array}  initialLayout Layout passed in through props.\n   * @param  {String} breakpoint    Current responsive breakpoint.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}                Working layout.\n   */\n  synchronizeLayoutWithChildren(initialLayout, children, cols, verticalCompact) {\n    // ensure 'children' is always an array\n    if (!Array.isArray(children)) {\n      children = [children];\n    }\n    initialLayout = initialLayout || [];\n\n    // Generate one layout item per child.\n    var layout = [];\n    for (var i = 0, len = children.length; i < len; i++) {\n      var child = children[i];\n      // Don't overwrite if it already exists.\n      var exists = utils.getLayoutItem(initialLayout, child.key);\n      if (exists) {\n        // Ensure 'i' is always a string\n        exists.i = '' + exists.i;\n        layout.push(exists);\n        continue;\n      }\n      // New item: attempt to use a layout item from the child, if it exists.\n      var g = child.props._grid;\n      if (g) {\n        utils.validateLayout([g], 'ReactGridLayout.child');\n        // Validated; add it to the layout. Bottom 'y' possible is the bottom of the layout.\n        // This allows you to do nice stuff like specify {y: Infinity}\n        if (verticalCompact) {\n          layout.push(assign({}, g, {y: Math.min(utils.bottom(layout), g.y), i: child.key}));\n        } else {\n          layout.push(assign({}, g, {y: g.y, i:child.key}));\n        }\n      } else {\n        // Nothing provided: ensure this is added to the bottom\n        layout.push({w: 1, h: 1, x: 0, y: utils.bottom(layout), i: child.key});\n      }\n    }\n\n    // Correct the layout.\n    layout = utils.correctBounds(layout, {cols: cols});\n    layout = utils.compact(layout, verticalCompact);\n\n    return layout;\n  },\n\n  /**\n   * Validate a layout. Throws errors.\n   *\n   * @param  {Array}  layout        Array of layout items.\n   * @param  {String} [contextName] Context name for errors.\n   * @throw  {Error}                Validation error.\n   */\n  validateLayout(layout, contextName) {\n    contextName = contextName || \"Layout\";\n    var subProps = ['x', 'y', 'w', 'h'];\n    if (!Array.isArray(layout)) throw new Error(contextName + \" must be an array!\");\n    for (var i = 0, len = layout.length; i < len; i++) {\n      for (var j = 0; j < subProps.length; j++) {\n        if (typeof layout[i][subProps[j]] !== 'number') {\n          throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].' + subProps[j] + ' must be a Number!');\n        }\n      }\n      if (layout[i].static !== undefined && typeof layout[i].static !== 'boolean') {\n        throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].static must be a Boolean!');\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/utils.js\n **/","'use strict';\nvar deepEqual = require('deep-equal');\n\n// Like PureRenderMixin, but with deep comparisons.\nvar PureDeepRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return !deepEqual(this.props, nextProps) ||\n           !deepEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = PureDeepRenderMixin;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mixins/PureDeepRenderMixin.js\n **/","'use strict';\n\nfunction ToObject(val) {\n\tif (val == null) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nmodule.exports = Object.assign || function (target, source) {\n\tvar from;\n\tvar keys;\n\tvar to = ToObject(target);\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = arguments[s];\n\t\tkeys = Object.keys(Object(from));\n\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tto[keys[i]] = from[keys[i]];\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/object-assign/index.js\n ** module id = 4\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule ReactComponentWithPureRenderMixin\n*/\n\n'use strict';\n\nvar shallowEqual = require(\"./shallowEqual\");\n\n/**\n * If your React component's render function is \"pure\", e.g. it will render the\n * same result given the same props and state, provide this Mixin for a\n * considerable performance boost.\n *\n * Most React components have pure render functions.\n *\n * Example:\n *\n *   var ReactComponentWithPureRenderMixin =\n *     require('ReactComponentWithPureRenderMixin');\n *   React.createClass({\n *     mixins: [ReactComponentWithPureRenderMixin],\n *\n *     render: function() {\n *       return <div className={this.props.className}>foo</div>;\n *     }\n *   });\n *\n * Note: This only checks shallow equality for props and state. If these contain\n * complex data structures this mixin may have false-negatives for deeper\n * differences. Only mixin to components which have simple props and state, or\n * use `forceUpdate()` when you know deep data structures have changed.\n */\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return !shallowEqual(this.props, nextProps) ||\n           !shallowEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = ReactComponentWithPureRenderMixin;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/ReactComponentWithPureRenderMixin.js\n ** module id = 5\n ** module chunks = 0\n **/","'use strict';\r\nvar React    = require('react')\r\n  , hasOwn   = Object.prototype.hasOwnProperty\r\n  , version  = React.version.split('.').map(parseFloat)\r\n  , RESERVED = {\r\n      className:  resolve(joinClasses),\r\n      children:   function(){},\r\n      key:        function(){},\r\n      ref:        function(){},\r\n      style:      resolve(extend)\r\n    };\r\n\r\nmodule.exports = function cloneWithProps(child, props) {\r\n  var newProps = mergeProps(props, child.props);\r\n\r\n  if (!hasOwn.call(newProps, 'children') && hasOwn.call(child.props, 'children'))\r\n    newProps.children = child.props.children;\r\n\r\n  // < 0.11\r\n  if (version[0] === 0 && version[1] < 11)\r\n    return child.constructor.ConvenienceConstructor(newProps);\r\n  \r\n  // 0.11\r\n  if (version[0] === 0 && version[1] === 11)\r\n    return child.constructor(newProps);\r\n\r\n  // 0.12\r\n  else if (version[0] === 0 && version[1] === 12){\r\n    MockLegacyFactory.isReactLegacyFactory = true\r\n    MockLegacyFactory.type = child.type\r\n    return React.createElement(MockLegacyFactory, newProps);\r\n  }\r\n\r\n  // 0.13+\r\n  return React.createElement(child.type, newProps);\r\n\r\n  function MockLegacyFactory(){}\r\n}\r\n\r\nfunction mergeProps(currentProps, childProps) {\r\n  var newProps = extend(currentProps), key\r\n\r\n  for (key in childProps) {\r\n    if (hasOwn.call(RESERVED, key) )\r\n      RESERVED[key](newProps, childProps[key], key)\r\n\r\n    else if ( !hasOwn.call(newProps, key) )\r\n      newProps[key] = childProps[key];\r\n  }\r\n  return newProps\r\n}\r\n\r\nfunction resolve(fn){\r\n  return function(src, value, key){\r\n    if( !hasOwn.call(src, key)) src[key] = value\r\n    else src[key] = fn(src[key], value)\r\n  }\r\n}\r\n\r\nfunction joinClasses(a, b){\r\n  if ( !a ) return b || ''\r\n  return a + (b ? ' ' + b : '')\r\n}\r\n\r\nfunction extend() {\r\n  var target = {};\r\n  for (var i = 0; i < arguments.length; i++) \r\n    for (var key in arguments[i]) if (hasOwn.call(arguments[i], key)) \r\n      target[key] = arguments[i][key]   \r\n  return target\r\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/cloneWithProps.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\nvar React = require('react');\nvar GridItem = require('./GridItem');\nvar utils = require('./utils');\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\nvar WidthListeningMixin = require('./mixins/WidthListeningMixin');\n\n/**\n * A reactive, fluid grid layout with draggable, resizable components.\n */\nvar ReactGridLayout = React.createClass({\n  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n  propTypes: {\n    //\n    // Basic props\n    //\n\n    // If true, the container height swells and contracts to fit contents\n    autoSize: React.PropTypes.bool,\n    // # of cols.\n    cols: React.PropTypes.number,\n\n    // A selector that will not be draggable.\n    draggableCancel: React.PropTypes.string,\n    // A selector for the draggable handler\n    draggableHandle: React.PropTypes.string,\n\n    // If true, the layout will compact vertically\n    verticalCompact: React.PropTypes.bool,\n\n    // layout is an array of object with the format:\n    // {x: Number, y: Number, w: Number, h: Number, i: Number}\n    layout: function(props, propName, componentName) {\n      var layout = props.layout;\n      // I hope you're setting the _grid property on the grid items\n      if (layout === undefined) return;\n      utils.validateLayout(layout, 'layout');\n    },\n\n    layouts: function(props, propName, componentName) {\n      if (props.layouts) {\n        throw new Error(\"ReactGridLayout does not use `layouts`: Use ReactGridLayout.Responsive.\");\n      }\n    },\n\n    // margin between items [x, y] in px\n    margin: React.PropTypes.array,\n    // Rows have a static height, but you can change this based on breakpoints if you like\n    rowHeight: React.PropTypes.number,\n\n    //\n    // Flags\n    //\n    isDraggable: React.PropTypes.bool,\n    isResizable: React.PropTypes.bool,\n    // Use CSS transforms instead of top/left\n    useCSSTransforms: React.PropTypes.bool,\n\n    //\n    // Callbacks\n    //\n\n    // Callback so you can save the layout.\n    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n    onLayoutChange: React.PropTypes.func,\n\n    // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e).\n    // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n    onDragStart: React.PropTypes.func,\n    // Calls on each drag movement.\n    onDrag: React.PropTypes.func,\n    // Calls when drag is complete.\n    onDragStop: React.PropTypes.func,\n    //Calls when resize starts.\n    onResizeStart: React.PropTypes.func,\n    // Calls when resize movement happens.\n    onResize: React.PropTypes.func,\n    // Calls when resize is complete.\n    onResizeStop: React.PropTypes.func,\n\n    //\n    // Other validations\n    //\n\n    // Children must not have duplicate keys.\n    children: function(props, propName, componentName) {\n      React.PropTypes.node.apply(this, arguments);\n      var children = props[propName];\n\n      // Check children keys for duplicates. Throw if found.\n      var keys = {};\n      React.Children.forEach(children, function(child, i, list) {\n        if (keys[child.key]) {\n          throw new Error(\"Duplicate child key found! This will cause problems in ReactGridLayout.\");\n        }\n        keys[child.key] = true;\n      });\n    }\n  },\n\n  getDefaultProps() {\n    return {\n      autoSize: true,\n      cols: 12,\n      rowHeight: 150,\n      layout: [],\n      margin: [10, 10],\n      isDraggable: true,\n      isResizable: true,\n      useCSSTransforms: true,\n      verticalCompact: true,\n      onLayoutChange: function(){},\n      onDragStart: function() {},\n      onDrag: function() {},\n      onDragStop: function() {},\n      onResizeStart: function() {},\n      onResize: function() {},\n      onResizeStop: function() {}\n    };\n  },\n\n  getInitialState() {\n    return {\n      activeDrag: null,\n      isMounted: false,\n      layout: utils.synchronizeLayoutWithChildren(this.props.layout, this.props.children, this.props.cols, this.props.verticalCompact),\n      width: this.props.initialWidth\n    };\n  },\n\n  componentDidMount() {\n    // Call back with layout on mount. This should be done after correcting the layout width\n    // to ensure we don't rerender with the wrong width.\n    this.props.onLayoutChange(this.state.layout);\n    this.setState({isMounted: true});\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // This allows you to set the width manually if you like.\n    // Use manual width changes in combination with `listenToWindowResize: false`\n    if (nextProps.width !== this.props.width) this.onWidthChange(nextProps.width);\n\n    // If children change, regenerate the layout.\n    if (nextProps.children.length !== this.props.children.length) {\n      this.setState({\n        layout: utils.synchronizeLayoutWithChildren(this.state.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n      });\n    }\n\n    // Allow parent to set layout directly.\n    if (nextProps.layout && JSON.stringify(nextProps.layout) !== JSON.stringify(this.state.layout)) {\n      this.setState({\n        layout: utils.synchronizeLayoutWithChildren(nextProps.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n      });\n    }\n  },\n\n  componentDidUpdate(prevProps, prevState) {\n    // Call back so we can store the layout\n    // Do it only when a resize/drag is not active, otherwise there are way too many callbacks\n    if (this.state.layout !== prevState.layout && !this.state.activeDrag) {\n      this.props.onLayoutChange(this.state.layout, this.state.layouts);\n    }\n  },\n\n  /**\n   * Calculates a pixel value for the container.\n   * @return {String} Container height in pixels.\n   */\n  containerHeight() {\n    if (!this.props.autoSize) return;\n    return utils.bottom(this.state.layout) * this.props.rowHeight + this.props.margin[1] + 'px';\n  },\n\n  /**\n   * When the width changes, save it to state. This helps with left/width calculations.\n   */\n  onWidthChange(width) {\n    this.setState({width: width});\n  },\n\n  /**\n   * When dragging starts\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDragStart(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n\n    // No need to clone, `l` hasn't changed.\n    this.props.onDragStart(layout, l, l, null, e);\n  },\n  /**\n   * Each drag movement create a new dragelement and move the element to the dragged location\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDrag(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    // Clone layout item so we can pass it to the callback.\n    var oldL = utils.clone(l);\n\n    // Create placeholder (display only)\n    var placeholder = {\n      w: l.w, h: l.h, x: l.x, y: l.y, placeholder: true, i: i\n    };\n\n    // Move the element to the dragged location.\n    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n    this.props.onDrag(layout, oldL, l, placeholder, e);\n\n\n    this.setState({\n      layout: utils.compact(layout, this.props.verticalCompact),\n      activeDrag: placeholder\n    });\n  },\n\n  /**\n   * When dragging stops, figure out which position the element is closest to and update its x and y.\n   * @param  {Number} i Index of the child.\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDragStop(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n\n    // Move the element here\n    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n    this.props.onDragStop(layout, oldL, l, null, e);\n\n    // Set state\n    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: null });\n  },\n\n  onResizeStart(i, w, h, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n\n    // No need to clone, item hasn't changed\n    this.props.onResizeStart(layout, l, l, null, e);\n  },\n\n  onResize(i, w, h, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n\n    // Set new width and height.\n    l.w = w;\n    l.h = h;\n\n    // Create placeholder element (display only)\n    var placeholder = {\n      w: w, h: h, x: l.x, y: l.y, placeholder: true, i: i\n    };\n\n    this.props.onResize(layout, oldL, l, placeholder, e);\n\n    // Re-compact the layout and set the drag placeholder.\n    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: placeholder });\n  },\n\n  onResizeStop(i, x, y, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n\n    this.props.onResizeStop(layout, oldL, l, null, e);\n\n    this.setState({ activeDrag: null, layout: utils.compact(layout, this.props.verticalCompact) });\n  },\n\n  /**\n   * Create a placeholder object.\n   * @return {Element} Placeholder div.\n   */\n  placeholder() {\n    if (!this.state.activeDrag) return '';\n\n    // {...this.state.activeDrag} is pretty slow, actually\n    return (\n      <GridItem\n        w={this.state.activeDrag.w}\n        h={this.state.activeDrag.h}\n        x={this.state.activeDrag.x}\n        y={this.state.activeDrag.y}\n        i={this.state.activeDrag.i}\n        isPlaceholder={true}\n        className=\"react-grid-placeholder\"\n        containerWidth={this.state.width}\n        cols={this.props.cols}\n        margin={this.props.margin}\n        rowHeight={this.props.rowHeight}\n        isDraggable={false}\n        isResizable={false}\n        useCSSTransforms={this.props.useCSSTransforms}\n        >\n        <div />\n      </GridItem>\n    );\n  },\n\n  /**\n   * Given a grid item, set its style attributes & surround in a <Draggable>.\n   * @param  {Element} child React element.\n   * @param  {Number}  i     Index of element.\n   * @return {Element}       Element wrapped in draggable and properly placed.\n   */\n  processGridItem(child) {\n    var i = child.key;\n    var l = utils.getLayoutItem(this.state.layout, i);\n\n    // watchStart property tells Draggable to react to changes in the start param\n    // Must be turned off on the item we're dragging as the changes in `activeDrag` cause rerenders\n    var moveOnStartChange = !(this.state.activeDrag && this.state.activeDrag.i === i);\n\n    // Parse 'static'. Any properties defined directly on the grid item will take precedence.\n    var draggable, resizable;\n    if (l.static || this.props.isDraggable === false) draggable = false;\n    if (l.static || this.props.isResizable === false) resizable = false;\n\n    return (\n      <GridItem\n        containerWidth={this.state.width}\n        cols={this.props.cols}\n        margin={this.props.margin}\n        rowHeight={this.props.rowHeight}\n        moveOnStartChange={moveOnStartChange}\n        cancel={this.props.draggableCancel}\n        handle={this.props.draggableHandle}\n        onDragStop={this.onDragStop}\n        onDragStart={this.onDragStart}\n        onDrag={this.onDrag}\n        onResizeStart={this.onResizeStart}\n        onResize={this.onResize}\n        onResizeStop={this.onResizeStop}\n        isDraggable={draggable}\n        isResizable={resizable}\n        useCSSTransforms={this.props.useCSSTransforms && this.state.isMounted}\n        usePercentages={!this.state.isMounted}\n        {...l}\n        >\n        {child}\n      </GridItem>\n    );\n  },\n\n  render() {\n    // Calculate classname\n    var {className, ...props} = this.props;\n    className = 'react-grid-layout ' + (className || '');\n\n    return (\n      <div {...props} className={className} style={{height: this.containerHeight()}}>\n        {React.Children.map(this.props.children, this.processGridItem)}\n        {this.placeholder()}\n      </div>\n    );\n  }\n});\n\nmodule.exports = ReactGridLayout;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/ReactGridLayout.jsx\n **/","'use strict';\nvar React = require('react');\n\n/**\n * A simple mixin that provides facility for listening to container resizes.\n */\nvar WidthListeningMixin = {\n\n  propTypes: {\n    // This allows setting this on the server side\n    initialWidth: React.PropTypes.number,\n\n    // If false, you should supply width yourself. Good if you want to debounce resize events\n    // or reuse a handler from somewhere else.\n    listenToWindowResize: React.PropTypes.bool\n  },\n\n  getDefaultProps: function() {\n    return {\n      initialWidth: 1280,\n      listenToWindowResize: true\n    };\n  },\n\n  componentDidMount: function() {\n    if (this.props.listenToWindowResize) {\n      window.addEventListener('resize', this.onWindowResize);\n      // This is intentional. Once to properly set the breakpoint and resize the elements,\n      // and again to compensate for any scrollbar that appeared because of the first step.\n      this.onWindowResize();\n      this.onWindowResize();\n    }\n  },\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onWindowResize);\n  },\n\n  /**\n   * On window resize, update width.\n   */\n  onWindowResize: function() {\n    this.onWidthChange(this.getDOMNode().offsetWidth);\n  }\n\n};\n\nmodule.exports = WidthListeningMixin;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mixins/WidthListeningMixin.js\n **/","'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar React = require('react');\nvar Draggable = require('react-draggable');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\nvar assign = require('object-assign');\nvar cloneWithProps = require('react/lib/cloneWithProps');\n\nvar Resizable = module.exports = React.createClass({\n  displayName: 'Resizable',\n  mixins: [PureRenderMixin],\n\n  propTypes: {\n    // Require that one and only one child be present.\n    children: React.PropTypes.element.isRequired,\n    // Functions\n    onResizeStop: React.PropTypes.func,\n    onResizeStart: React.PropTypes.func,\n    onResize: React.PropTypes.func,\n\n    width: React.PropTypes.number.isRequired,\n    height: React.PropTypes.number.isRequired,\n    // If you change this, be sure to update your css\n    handleSize: React.PropTypes.array,\n    // These will be passed wholesale to react-draggable\n    draggableOpts: React.PropTypes.object\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      handleSize: [20, 20]\n    };\n  },\n\n  minConstraints: function minConstraints() {\n    return parseConstraints(this.props.minConstraints, this.props.handleSize) || this.props.handleSize;\n  },\n\n  maxConstraints: function maxConstraints() {\n    return parseConstraints(this.props.maxConstraints, this.props.handleSize);\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  resizeHandler: function resizeHandler(handlerName) {\n    var me = this;\n    return function (e, _ref) {\n      var element = _ref.element;\n      var position = _ref.position;\n\n      me.props[handlerName] && me.props[handlerName](e, { element: element, size: calcWH(position, me.props.handleSize) });\n    };\n  },\n\n  render: function render() {\n    var p = this.props;\n\n    // What we're doing here is getting the child of this element, and cloning it with this element's props.\n    // We are then defining its children as:\n    // Its original children (resizable's child's children), and\n    // A draggable handle.\n    return cloneWithProps(p.children, assign({}, p, {\n      children: [p.children.props.children, React.createElement(\n        Draggable,\n        _extends({}, p.draggableOpts, {\n          start: { x: p.width - 20, y: p.height - 20 },\n          moveOnStartChange: true,\n          onStop: this.resizeHandler('onResizeStop'),\n          onStart: this.resizeHandler('onResizeStart'),\n          onDrag: this.resizeHandler('onResize'),\n          minConstraints: this.minConstraints(),\n          maxConstraints: this.maxConstraints()\n        }),\n        React.createElement('span', { className: 'react-resizable-handle' })\n      )]\n    }));\n  }\n});\n\n/**\n * Parse left and top coordinates; we have to add the handle size to get the full picture.\n * @param  {Number} options.left Left coordinate.\n * @param  {Number} options.top  Top coordinate.\n * @param  {Array}  handleSize   Handle data.\n * @return {Object}              Coordinates\n */\nfunction calcWH(_ref, handleSize) {\n  var left = _ref.left;\n  var top = _ref.top;\n\n  return { width: left + handleSize[0], height: top + handleSize[1] };\n}\n\n/**\n * Constraints must be subtracted by the size of the handle to work properly.\n * This has a side-effect of effectively limiting the minimum size to the handleSize,\n * which IMO is fine.\n * @param  {Array} constraints Constraints array.\n * @param  {Array} handleSize  Handle size array.\n * @return {Array}             Transformed constraints.\n */\nfunction parseConstraints(constraints, handleSize) {\n  if (!constraints) {\n    return;\n  }return constraints.map(function (c, i) {\n    return c - handleSize[i];\n  });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/build/Resizable.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\nvar React = require('react');\nvar cloneWithProps = require('react/lib/cloneWithProps');\nvar utils = require('./utils');\nvar Draggable = require('react-draggable');\nvar Resizable = require('react-resizable').Resizable;\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\n\n/**\n * An individual item within a ReactGridLayout.\n */\nvar GridItem = React.createClass({\n  mixins: [PureDeepRenderMixin],\n\n  propTypes: {\n    // Children must be only a single element\n    children: React.PropTypes.element,\n\n    // General grid attributes\n    cols: React.PropTypes.number.isRequired,\n    containerWidth: React.PropTypes.number.isRequired,\n    rowHeight: React.PropTypes.number.isRequired,\n    margin: React.PropTypes.array.isRequired,\n\n    // These are all in grid units\n    x: React.PropTypes.number.isRequired,\n    y: React.PropTypes.number.isRequired,\n    w: React.PropTypes.number.isRequired,\n    h: React.PropTypes.number.isRequired,\n\n    // All optional\n    minW: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.minW > props.w || props.minW > props.maxW) constraintError('minW', props);\n    },\n    maxW: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.maxW < props.w || props.maxW < props.minW) constraintError('maxW', props);\n    },\n    minH: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.minH > props.h || props.minH > props.maxH) constraintError('minH', props);\n    },\n    maxH: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.maxH < props.h || props.maxH < props.minH) constraintError('maxH', props);\n    },\n\n    // ID is nice to have for callbacks\n    i: React.PropTypes.string.isRequired,\n\n    // If true, item will be repositioned when x/y/w/h change\n    moveOnStartChange: React.PropTypes.bool,\n\n    // Functions\n    onDragStop: React.PropTypes.func,\n    onDragStart: React.PropTypes.func,\n    onDrag: React.PropTypes.func,\n    onResizeStop: React.PropTypes.func,\n    onResizeStart: React.PropTypes.func,\n    onResize: React.PropTypes.func,\n\n    // Flags\n    isDraggable: React.PropTypes.bool,\n    isResizable: React.PropTypes.bool,\n    // Use CSS transforms instead of top/left\n    useCSSTransforms: React.PropTypes.bool,\n    isPlaceholder: React.PropTypes.bool,\n\n    // Others\n    className: React.PropTypes.string,\n    // Selector for draggable handle\n    handle: React.PropTypes.string,\n    // Selector for draggable cancel (see react-draggable)\n    cancel: React.PropTypes.string\n  },\n\n  getDefaultProps() {\n    return {\n      isDraggable: true,\n      isResizable: true,\n      useCSSTransforms: true,\n      className: '',\n      cancel: '',\n      minH: 1,\n      minW: 1,\n      maxH: Infinity,\n      maxW: Infinity\n    };\n  },\n\n  getInitialState() {\n    return {\n      resizing: false,\n      className: ''\n    };\n  },\n\n  /**\n   * Return position on the page given an x, y, w, h.\n   * left, top, width, height are all in pixels.\n   * @param  {Number}  x             X coordinate in grid units.\n   * @param  {Number}  y             Y coordinate in grid units.\n   * @param  {Number}  w             W coordinate in grid units.\n   * @param  {Number}  h             H coordinate in grid units.\n   * @return {Object}                Object containing coords.\n   */\n  calcPosition(x, y, w, h) {\n    var p = this.props;\n    var width = p.containerWidth - p.margin[0];\n    var out = {\n      left: width * (x / p.cols) + p.margin[0],\n      top: p.rowHeight * y + p.margin[1],\n      width: width * (w / p.cols) - p.margin[0],\n      height: h * p.rowHeight - p.margin[1]\n    };\n    return out;\n  },\n\n  /**\n   * Translate x and y coordinates from pixels to grid units.\n   * @param  {Number} options.left  Left offset in pixels.\n   * @param  {Number} options.top   Top offset in pixels.\n   * @return {Object}               x and y in grid units.\n   */\n  calcXY({left, top}) {\n    left = left - this.props.margin[0];\n    top = top - this.props.margin[1];\n    // This is intentional; because so much of the logic on moving boxes up/down relies\n    // on an exact y position, we only round the x, not the y.\n    var x = Math.round((left / this.props.containerWidth) * this.props.cols);\n    var y = Math.floor(top / this.props.rowHeight);\n    x = Math.max(Math.min(x, this.props.cols), 0);\n    y = Math.max(y, 0);\n    return {x, y};\n  },\n\n  /**\n   * Given a height and width in pixel values, calculate grid units.\n   * @param  {Number} options.height Height in pixels.\n   * @param  {Number} options.width  Width in pixels.\n   * @return {Object}                w, h as grid units.\n   */\n  calcWH({height, width}) {\n    width = width + this.props.margin[0];\n    height = height + this.props.margin[1];\n    var w = Math.round((width / this.props.containerWidth) * this.props.cols);\n    var h = Math.round(height / this.props.rowHeight);\n    w = Math.max(Math.min(w, this.props.cols - this.props.x), 0);\n    h = Math.max(h, 0);\n    return {w, h};\n  },\n\n  /**\n   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n   * we don't know exactly what the browser viewport is.\n   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n   *\n   * @param  {Object} pos Position object with width, height, left, top.\n   * @return {Object}     Style object.\n   */\n  createStyle(pos) {\n    var style = {\n      width: pos.width + 'px',\n      height: pos.height + 'px',\n      left: pos.left + 'px',\n      top: pos.top + 'px',\n      position: 'absolute'\n    };\n\n    // This is used for server rendering.\n    if (this.props.usePercentages) {\n      pos.left = utils.perc(pos.left / this.props.containerWidth);\n      style.left = pos.left;\n      style.width = utils.perc(pos.width / this.props.containerWidth);\n    }\n\n    // CSS Transforms support\n    if (this.props.useCSSTransforms) {\n      utils.setTransform(style, [pos.left, pos.top]);\n      delete style.left;\n      delete style.top;\n    }\n\n    return style;\n  },\n\n  /**\n   * Mix a Draggable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Draggable.\n   */\n  mixinDraggable(child, position) {\n    var start = typeof position.left === \"string\" ? undefined : {x: position.left, y: position.top};\n    return (\n      <Draggable\n        start={start}\n        moveOnStartChange={this.props.moveOnStartChange}\n        onStop={this.onDragHandler('onDragStop')}\n        onStart={this.onDragHandler('onDragStart')}\n        onDrag={this.onDragHandler('onDrag')}\n        handle={this.props.handle}\n        cancel={\".react-resizable-handle \" + this.props.cancel}\n        useCSSTransforms={this.props.useCSSTransforms}\n        >\n        {child}\n      </Draggable>\n    );\n  },\n\n  /**\n   * Mix a Resizable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Resizable.\n   */\n  mixinResizable(child, position) {\n    var p = this.props;\n    // This is the max possible width - doesn't go to infinity because of the width of the window\n    var maxWidth = this.calcPosition(0, 0, p.cols - p.x, 0).width;\n\n    // Calculate min/max constraints using our min & maxes\n    var mins = this.calcPosition(0, 0, p.minW, p.minH);\n    var maxes = this.calcPosition(0, 0, p.maxW, p.maxH);\n    var minConstraints = [mins.width, mins.height];\n    var maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n    return (\n      <Resizable\n        width={position.width}\n        height={position.height}\n        minConstraints={minConstraints}\n        maxConstraints={maxConstraints}\n        onResizeStop={this.onResizeHandler('onResizeStop')}\n        onResizeStart={this.onResizeHandler('onResizeStart')}\n        onResize={this.onResizeHandler('onResize')}\n        >\n        {child}\n      </Resizable>\n    );\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  onDragHandler(handlerName) {\n    var me = this;\n    return function(e, {element, position}) {\n      if (!me.props[handlerName]) return;\n      // Get new XY\n      var {x, y} = me.calcXY(position);\n\n      // Cap x at numCols\n      x = Math.min(x, me.props.cols - me.props.w);\n\n      me.props[handlerName](me.props.i, x, y, {e, element, position});\n    };\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  onResizeHandler(handlerName) {\n    var me = this;\n    return function(e, {element, size}) {\n      if (!me.props[handlerName]) return;\n\n      // Get new XY\n      var {w, h} = me.calcWH(size);\n\n      // Cap w at numCols\n      w = Math.min(w, me.props.cols - me.props.x);\n      // Ensure w is at least 1\n      w = Math.max(w, 1);\n\n      // Min/max capping\n      w = Math.max(Math.min(w, me.props.maxW), me.props.minW);\n      h = Math.max(Math.min(h, me.props.maxH), me.props.minH);\n\n      me.setState({resizing: handlerName === 'onResizeStop' ? null : size});\n\n      me.props[handlerName](me.props.i, w, h, {e, element, size});\n    };\n  },\n\n  render() {\n    var p = this.props, pos = this.calcPosition(p.x, p.y, p.w, p.h);\n    if (this.state.resizing) {\n      pos.width = this.state.resizing.width;\n      pos.height = this.state.resizing.height;\n    }\n\n    // Create the child element. We clone the existing element but modify its className and style.\n    var child = cloneWithProps(this.props.children, {\n      // Munge a classname. Use passed in classnames and resizing.\n      // React with merge the classNames.\n      className: ['react-grid-item', this.props.className, this.state.resizing ? 'resizing' : '',\n        this.props.useCSSTransforms ? 'cssTransforms' : ''].join(' '),\n      // We can set the width and height on the child, but unfortunately we can't set the position.\n      style: this.createStyle(pos)\n    });\n\n    // Resizable support. This is usually on but the user can toggle it off.\n    if (this.props.isResizable) {\n      child = this.mixinResizable(child, pos);\n    }\n\n    // Draggable support. This is always on, except for with placeholders.\n    if (this.props.isDraggable) {\n      child = this.mixinDraggable(child, pos);\n    }\n\n    return child;\n  }\n});\n\nfunction constraintError(name, props) {\n  delete props.children;\n  throw new Error(name + ' overrides contraints on gridItem ' + props.i + '. Full props: ' + JSON.stringify(props));\n}\n\nmodule.exports = GridItem;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/GridItem.jsx\n **/","'use strict';\nvar React = require('react');\nvar utils = require('./utils');\nvar responsiveUtils = require('./responsiveUtils');\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\nvar WidthListeningMixin = require('./mixins/WidthListeningMixin');\nvar ReactGridLayout = require('./ReactGridLayout');\n\n/**\n * A wrapper around ReactGridLayout to support responsive breakpoints.\n */\nvar ResponsiveReactGridLayout = React.createClass({\n  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n  propTypes: {\n    //\n    // Basic props\n    //\n\n    // Optional, but if you are managing width yourself you may want to set the breakpoint\n    // yourself as well.\n    breakpoint: React.PropTypes.string,\n\n    // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n    breakpoints: React.PropTypes.object,\n\n    // # of cols. This is a breakpoint -> cols map\n    cols: React.PropTypes.object,\n\n    // layouts is an object mapping breakpoints to layouts.\n    // e.g. {lg: Layout, md: Layout, ...}\n    layouts: function(props, propName, componentName) {\n      React.PropTypes.object.isRequired.apply(this, arguments);\n\n      var layouts = props.layouts;\n      Object.keys(layouts).map(function(k) {\n        utils.validateLayout(layouts[k], 'layouts.' + k);\n      });\n    },\n\n    //\n    // Callbacks\n    //\n\n    // Calls back with breakpoint and new # cols\n    onBreakpointChange: React.PropTypes.func,\n\n    // Callback so you can save the layout.\n    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n    onLayoutChange: React.PropTypes.func\n  },\n\n  getDefaultProps() {\n    return {\n      breakpoints: {lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0},\n      cols: {lg: 12, md: 10, sm: 6, xs: 4, xxs: 2},\n      layouts: {},\n      onBreakpointChange: function(){},\n      onLayoutChange: function(){}\n    };\n  },\n\n  getInitialState() {\n    var breakpoint = this.props.breakpoint ||\n      responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, this.props.initialWidth);\n    var cols = responsiveUtils.getColsFromBreakpoint(breakpoint, this.props.cols);\n\n    // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n    // for this layout.\n    var initialLayout = responsiveUtils.findOrGenerateResponsiveLayout(\n      this.props.layouts, this.props.breakpoints, breakpoint, breakpoint, cols, this.props.verticalCompact);\n\n    return {\n      layout: initialLayout,\n      // storage for layouts obsoleted by breakpoints\n      layouts: this.props.layouts || {},\n      breakpoint: breakpoint,\n      cols: cols,\n      width: this.props.initialWidth\n    };\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // This allows you to set the width manually if you like.\n    // Use manual width changes in combination with `listenToWindowResize: false`\n    if (nextProps.width) this.onWidthChange(nextProps.width);\n\n    // Allow parent to set breakpoint directly.\n    if (nextProps.breakpoint !== this.props.breakpoint) {\n      this.onWidthChange(this.state.width);\n    }\n\n    // Allow parent to set layouts directly.\n    if (nextProps.layouts && nextProps.layouts !== this.state.layouts) {\n      // Since we're setting an entirely new layout object, we must generate a new responsive layout\n      // if one does not exist.\n      var newLayout = responsiveUtils.findOrGenerateResponsiveLayout(\n        nextProps.layouts, nextProps.breakpoints, this.state.breakpoint, this.state.breakpoint, this.state.cols, this.props.verticalLayout);\n\n      this.setState({\n        layouts: nextProps.layouts,\n        layout: newLayout\n      });\n    }\n  },\n\n  /**\n   * Bubble this up, add `layouts` object.\n   * @param  {Array} layout Layout from inner Grid.\n   */\n  onLayoutChange(layout) {\n    this.state.layouts[this.state.breakpoint] = layout;\n    this.setState({layout: layout, layouts: this.state.layouts});\n    this.props.onLayoutChange(layout, this.state.layouts);\n  },\n\n  /**\n   * When the width changes work through breakpoints and reset state with the new width & breakpoint.\n   * Width changes are necessary to figure out the widget widths.\n   */\n  onWidthChange(width) {\n    // Set new breakpoint\n    var newState = {width: width};\n    newState.breakpoint = this.props.breakpoint ||\n      responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, newState.width);\n    newState.cols = responsiveUtils.getColsFromBreakpoint(newState.breakpoint, this.props.cols);\n\n    // Breakpoint change\n    if (newState.cols !== this.state.cols) {\n\n      // Store the current layout\n      newState.layouts = this.state.layouts;\n      newState.layouts[this.state.breakpoint] = JSON.parse(JSON.stringify(this.state.layout));\n\n      // Find or generate a new one.\n      newState.layout = responsiveUtils.findOrGenerateResponsiveLayout(\n        newState.layouts, this.props.breakpoints, newState.breakpoint, this.state.breakpoint, newState.cols, this.props.verticalLayout);\n\n      // This adds missing items.\n      newState.layout = utils.synchronizeLayoutWithChildren(newState.layout, this.props.children, newState.cols, this.props.verticalCompact);\n\n      // Store this new layout as well.\n      newState.layouts[newState.breakpoint] = newState.layout;\n\n      this.props.onBreakpointChange(newState.breakpoint, newState.cols);\n    }\n\n    this.setState(newState);\n  },\n\n\n  render() {\n    // Don't pass responsive props to RGL.\n    /*jshint unused:false*/\n    var {layouts, onBreakpointChange, breakpoints, ...props} = this.props;\n    return (\n      <ReactGridLayout {...props}\n          layout={this.state.layout}\n          cols={this.state.cols}\n          listenToWindowResize={false}\n          onLayoutChange={this.onLayoutChange}\n          width={this.state.width}>\n        {this.props.children}\n      </ReactGridLayout>\n    );\n  }\n});\n\nmodule.exports = ResponsiveReactGridLayout;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/ResponsiveReactGridLayout.jsx\n **/","'use strict';\n\nvar utils = require('./utils');\n\nvar responsiveUtils = module.exports = {\n\n  /**\n   * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n   *\n   * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n   * @param  {Number} width Screen width.\n   * @return {String}       Highest breakpoint that is less than width.\n   */\n  getBreakpointFromWidth(breakpoints, width) {\n    var sorted = responsiveUtils.sortBreakpoints(breakpoints);\n    var matching = sorted[0];\n    for (var i = 1, len = sorted.length; i < len; i++) {\n      var breakpointName = sorted[i];\n      if (width > breakpoints[breakpointName]) matching = breakpointName;\n    }\n    return matching;\n  },\n\n\n  /**\n   * Given a breakpoint, get the # of cols set for it.\n   * @param  {String} breakpoint Breakpoint name.\n   * @param  {Object} cols       Map of breakpoints to cols.\n   * @return {Number}            Number of cols.\n   */\n  getColsFromBreakpoint(breakpoint, cols) {\n    if (!cols[breakpoint]) {\n      throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n    }\n    return cols[breakpoint];\n  },\n\n  /**\n   * Given existing layouts and a new breakpoint, find or generate a new layout.\n   *\n   * This finds the layout above the new one and generates from it, if it exists.\n   *\n   * @param  {Array} layouts     Existing layouts.\n   * @param  {Array} breakpoints All breakpoints.\n   * @param  {String} breakpoint New breakpoint.\n   * @param  {String} breakpoint Last breakpoint (for fallback).\n   * @param  {Number} cols       Column count at new breakpoint.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}             New layout.\n   */\n  findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, verticalCompact) {\n    // If it already exists, just return it.\n    if (layouts[breakpoint]) return layouts[breakpoint];\n    // Find or generate the next layout\n    var layout = layouts[lastBreakpoint];\n    var breakpointsSorted = responsiveUtils.sortBreakpoints(breakpoints);\n    var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n    for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n      var b = breakpointsAbove[i];\n      if (layouts[b]) {\n        layout = layouts[b];\n        break;\n      }\n    }\n    layout = JSON.parse(JSON.stringify(layout || [])); // clone layout so we don't modify existing items\n    return utils.compact(utils.correctBounds(layout, {cols: cols}), verticalCompact);\n  },\n\n\n  /**\n   * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n   * e.g. ['xxs', 'xs', 'sm', ...]\n   *\n   * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n   * @return {Array}              Sorted breakpoints.\n   */\n  sortBreakpoints(breakpoints) {\n    var keys = Object.keys(breakpoints);\n    return keys.sort(function(a, b) {\n      return breakpoints[a] - breakpoints[b];\n    });\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/responsiveUtils.js\n **/","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/index.js\n ** module id = 13\n ** module chunks = 0\n **/","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/lib/is_arguments.js\n ** module id = 14\n ** module chunks = 0\n **/","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/lib/keys.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\n\nvar React = require('react');\nvar emptyFunction = function(){};\nvar assign = require('object-assign');\nvar classNames = require('classnames');\n\n//\n// Helpers. See Element definition below this section.\n//\n\nfunction createUIEvent(draggable) {\n  // State changes are often (but not always!) async. We want the latest value.\n  var state = draggable._pendingState || draggable.state;\n  return {\n    node: draggable.getDOMNode(),\n    position: {\n      top: state.clientY,\n      left: state.clientX\n    }\n  };\n}\n\nfunction canDragY(draggable) {\n  return draggable.props.axis === 'both' ||\n      draggable.props.axis === 'y';\n}\n\nfunction canDragX(draggable) {\n  return draggable.props.axis === 'both' ||\n      draggable.props.axis === 'x';\n}\n\nfunction isFunction(func) {\n  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n}\n\n// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\nfunction findInArray(array, callback) {\n  for (var i = 0, length = array.length; i < length; i++) {\n    if (callback.apply(callback, [array[i], i, array])) return array[i];\n  }\n}\n\nfunction matchesSelector(el, selector) {\n  var method = findInArray([\n    'matches',\n    'webkitMatchesSelector',\n    'mozMatchesSelector',\n    'msMatchesSelector',\n    'oMatchesSelector'\n  ], function(method){\n    return isFunction(el[method]);\n  });\n\n  return el[method].call(el, selector);\n}\n\n/**\n * simple abstraction for dragging events names\n * */\nvar eventsFor = {\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    end: 'touchend'\n  },\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    end: 'mouseup'\n  }\n};\n\n// Default to mouse events\nvar dragEventFor = eventsFor['mouse'];\n\n/**\n * get {clientX, clientY} positions of control\n * */\nfunction getControlPosition(e) {\n  var position = (e.touches && e.touches[0]) || e;\n  return {\n    clientX: position.clientX,\n    clientY: position.clientY\n  };\n}\n\nfunction addEvent(el, event, handler) {\n  if (!el) { return; }\n  if (el.attachEvent) {\n    el.attachEvent('on' + event, handler);\n  } else if (el.addEventListener) {\n    el.addEventListener(event, handler, true);\n  } else {\n    el['on' + event] = handler;\n  }\n}\n\nfunction removeEvent(el, event, handler) {\n  if (!el) { return; }\n  if (el.detachEvent) {\n    el.detachEvent('on' + event, handler);\n  } else if (el.removeEventListener) {\n    el.removeEventListener(event, handler, true);\n  } else {\n    el['on' + event] = null;\n  }\n}\n\nfunction outerHeight(node) {\n  // This is deliberately excluding margin for our calculations, since we are using\n  // offsetTop which is including margin. See getBoundPosition\n  var height = node.clientHeight;\n  var computedStyle = window.getComputedStyle(node);\n  height += int(computedStyle.borderTopWidth);\n  height += int(computedStyle.borderBottomWidth);\n  return height;\n}\n\nfunction outerWidth(node) {\n  // This is deliberately excluding margin for our calculations, since we are using\n  // offsetLeft which is including margin. See getBoundPosition\n  var width = node.clientWidth;\n  var computedStyle = window.getComputedStyle(node);\n  width += int(computedStyle.borderLeftWidth);\n  width += int(computedStyle.borderRightWidth);\n  return width;\n}\nfunction innerHeight(node) {\n  var height = node.clientHeight;\n  var computedStyle = window.getComputedStyle(node);\n  height -= int(computedStyle.paddingTop);\n  height -= int(computedStyle.paddingBottom);\n  return height;\n}\n\nfunction innerWidth(node) {\n  var width = node.clientWidth;\n  var computedStyle = window.getComputedStyle(node);\n  width -= int(computedStyle.paddingLeft);\n  width -= int(computedStyle.paddingRight);\n  return width;\n}\n\nfunction isNum(num) {\n  return typeof num === 'number' && !isNaN(num);\n}\n\nfunction int(a) {\n  return parseInt(a, 10);\n}\n\nfunction getBoundPosition(draggable, clientX, clientY) {\n  var bounds = JSON.parse(JSON.stringify(draggable.props.bounds));\n  var node = draggable.getDOMNode();\n  var parent = node.parentNode;\n\n  if (bounds === 'parent') {\n    var nodeStyle = window.getComputedStyle(node);\n    var parentStyle = window.getComputedStyle(parent);\n    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n    bounds = {\n      left: -node.offsetLeft + int(parentStyle.paddingLeft) +\n            int(nodeStyle.borderLeftWidth) + int(nodeStyle.marginLeft),\n      top: -node.offsetTop + int(parentStyle.paddingTop) +\n            int(nodeStyle.borderTopWidth) + int(nodeStyle.marginTop),\n      right: innerWidth(parent) - outerWidth(node) - node.offsetLeft,\n      bottom: innerHeight(parent) - outerHeight(node) - node.offsetTop\n    };\n  }\n\n  // Keep x and y below right and bottom limits...\n  if (isNum(bounds.right)) clientX = Math.min(clientX, bounds.right);\n  if (isNum(bounds.bottom)) clientY = Math.min(clientY, bounds.bottom);\n\n  // But above left and top limits.\n  if (isNum(bounds.left)) clientX = Math.max(clientX, bounds.left);\n  if (isNum(bounds.top)) clientY = Math.max(clientY, bounds.top);\n\n  return [clientX, clientY];\n}\n\nfunction snapToGrid(grid, pendingX, pendingY) {\n  var x = Math.round(pendingX / grid[0]) * grid[0];\n  var y = Math.round(pendingY / grid[1]) * grid[1];\n  return [x, y];\n}\n\n// Useful for preventing blue highlights all over everything when dragging.\nvar userSelectStyle = ';user-select: none;-webkit-user-select:none;-moz-user-select:none;' +\n  '-o-user-select:none;-ms-user-select:none;';\n\nfunction addUserSelectStyles(draggable) {\n  if (!draggable.props.enableUserSelectHack) return;\n  var style = document.body.getAttribute('style') || '';\n  document.body.setAttribute('style', style + userSelectStyle);\n}\n\nfunction removeUserSelectStyles(draggable) {\n  if (!draggable.props.enableUserSelectHack) return;\n  var style = document.body.getAttribute('style') || '';\n  document.body.setAttribute('style', style.replace(userSelectStyle, ''));\n}\n\nfunction createCSSTransform(style) {\n  // Replace unitless items with px\n  var x = style.x + 'px';\n  var y = style.y + 'px';\n  return {\n    transform: 'translate(' + x + ',' + y + ')',\n    WebkitTransform: 'translate(' + x + ',' + y + ')',\n    OTransform: 'translate(' + x + ',' + y + ')',\n    msTransform: 'translate(' + x + ',' + y + ')',\n    MozTransform: 'translate(' + x + ',' + y + ')'\n  };\n}\n\n\n//\n// End Helpers.\n//\n\n//\n// Define <Draggable>\n//\n\nmodule.exports = React.createClass({\n  displayName: 'Draggable',\n\n  propTypes: {\n    /**\n     * `axis` determines which axis the draggable can move.\n     *\n     * 'both' allows movement horizontally and vertically.\n     * 'x' limits movement to horizontal axis.\n     * 'y' limits movement to vertical axis.\n     *\n     * Defaults to 'both'.\n     */\n    axis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\n    /**\n     * `bounds` determines the range of movement available to the element.\n     * Available values are:\n     *\n     * 'parent' restricts movement within the Draggable's parent node.\n     *\n     * Alternatively, pass an object with the following properties, all of which are optional:\n     *\n     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n     *\n     * All values are in px.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *         return (\n     *            <Draggable bounds={{right: 300, bottom: 300}}>\n     *              <div>Content</div>\n     *           </Draggable>\n     *         );\n     *       }\n     *   });\n     * ```\n     */\n    bounds: React.PropTypes.oneOfType([\n      React.PropTypes.shape({\n        left: React.PropTypes.Number,\n        right: React.PropTypes.Number,\n        top: React.PropTypes.Number,\n        bottom: React.PropTypes.Number\n      }),\n      React.PropTypes.oneOf(['parent', false])\n    ]),\n\n    /**\n     * By default, we add 'user-select:none' attributes to the document body\n     * to prevent ugly text selection during drag. If this is causing problems\n     * for your app, set this to `false`.\n     */\n    enableUserSelectHack: React.PropTypes.bool,\n\n    /**\n     * `handle` specifies a selector to be used as the handle that initiates drag.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *         return (\n     *            <Draggable handle=\".handle\">\n     *              <div>\n     *                  <div className=\"handle\">Click me to drag</div>\n     *                  <div>This is some other content</div>\n     *              </div>\n     *           </Draggable>\n     *         );\n     *       }\n     *   });\n     * ```\n     */\n    handle: React.PropTypes.string,\n\n    /**\n     * `cancel` specifies a selector to be used to prevent drag initialization.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *           return(\n     *               <Draggable cancel=\".cancel\">\n     *                   <div>\n     *                     <div className=\"cancel\">You can't drag from here</div>\n     *            <div>Dragging here works fine</div>\n     *                   </div>\n     *               </Draggable>\n     *           );\n     *       }\n     *   });\n     * ```\n     */\n    cancel: React.PropTypes.string,\n\n    /**\n     * `grid` specifies the x and y that dragging should snap to.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *           return (\n     *               <Draggable grid={[25, 25]}>\n     *                   <div>I snap to a 25 x 25 grid</div>\n     *               </Draggable>\n     *           );\n     *       }\n     *   });\n     * ```\n     */\n    grid: React.PropTypes.arrayOf(React.PropTypes.number),\n\n    /**\n     * `start` specifies the x and y that the dragged item should start at\n     *\n     * Example:\n     *\n     * ```jsx\n     *      var App = React.createClass({\n     *          render: function () {\n     *              return (\n     *                  <Draggable start={{x: 25, y: 25}}>\n     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n     *                  </Draggable>\n     *              );\n     *          }\n     *      });\n     * ```\n     */\n    start: React.PropTypes.shape({\n      x: React.PropTypes.number,\n      y: React.PropTypes.number\n    }),\n\n    /**\n     * `moveOnStartChange`, if true (default false) will move the element if the `start`\n     * property changes.\n     */\n    moveOnStartChange: React.PropTypes.bool,\n\n\n    /**\n     * `zIndex` specifies the zIndex to use while dragging.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *           return (\n     *               <Draggable zIndex={100}>\n     *                   <div>I have a zIndex</div>\n     *               </Draggable>\n     *           );\n     *       }\n     *   });\n     * ```\n     */\n    zIndex: React.PropTypes.number,\n\n    /**\n     * Called when dragging starts.\n     * If this function returns the boolean false, dragging will be canceled.\n     *\n     * Example:\n     *\n     * ```js\n     *  function (event, ui) {}\n     * ```\n     *\n     * `event` is the Event that was triggered.\n     * `ui` is an object:\n     *\n     * ```js\n     *  {\n     *    position: {top: 0, left: 0}\n     *  }\n     * ```\n     */\n    onStart: React.PropTypes.func,\n\n    /**\n     * Called while dragging.\n     * If this function returns the boolean false, dragging will be canceled.\n     *\n     * Example:\n     *\n     * ```js\n     *  function (event, ui) {}\n     * ```\n     *\n     * `event` is the Event that was triggered.\n     * `ui` is an object:\n     *\n     * ```js\n     *  {\n     *    position: {top: 0, left: 0}\n     *  }\n     * ```\n     */\n    onDrag: React.PropTypes.func,\n\n    /**\n     * Called when dragging stops.\n     *\n     * Example:\n     *\n     * ```js\n     *  function (event, ui) {}\n     * ```\n     *\n     * `event` is the Event that was triggered.\n     * `ui` is an object:\n     *\n     * ```js\n     *  {\n     *    position: {top: 0, left: 0}\n     *  }\n     * ```\n     */\n    onStop: React.PropTypes.func,\n\n    /**\n     * A workaround option which can be passed if onMouseDown needs to be accessed,\n     * since it'll always be blocked (due to that there's internal use of onMouseDown)\n     */\n    onMouseDown: React.PropTypes.func,\n  },\n\n  componentWillReceiveProps: function(newProps) {\n    // React to changes in the 'start' param.\n    if (newProps.moveOnStartChange && newProps.start) {\n      this.setState(this.getInitialState(newProps));\n    }\n  },\n\n  componentWillUnmount: function() {\n    // Remove any leftover event handlers\n    removeEvent(document, dragEventFor['move'], this.handleDrag);\n    removeEvent(document, dragEventFor['end'], this.handleDragEnd);\n    removeUserSelectStyles(this);\n  },\n\n  getDefaultProps: function () {\n    return {\n      axis: 'both',\n      bounds: false,\n      handle: null,\n      cancel: null,\n      grid: null,\n      moveOnStartChange: false,\n      start: {x: 0, y: 0},\n      zIndex: NaN,\n      enableUserSelectHack: true,\n      onStart: emptyFunction,\n      onDrag: emptyFunction,\n      onStop: emptyFunction,\n      onMouseDown: emptyFunction\n    };\n  },\n\n  getInitialState: function (props) {\n    // Handle call from CWRP\n    props = props || this.props;\n    return {\n      // Whether or not we are currently dragging.\n      dragging: false,\n\n      // Offset between start top/left and mouse top/left while dragging.\n      offsetX: 0, offsetY: 0,\n\n      // Current transform x and y.\n      clientX: props.start.x, clientY: props.start.y\n    };\n  },\n\n  handleDragStart: function (e) {\n    // Make it possible to attach event handlers on top of this one\n    this.props.onMouseDown(e);\n\n    // Short circuit if handle or cancel prop was provided and selector doesn't match\n    if ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n      (this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n      return;\n    }\n\n    // Call event handler. If it returns explicit false, cancel.\n    var shouldStart = this.props.onStart(e, createUIEvent(this));\n    if (shouldStart === false) return;\n\n    var dragPoint = getControlPosition(e);\n\n    // Add a style to the body to disable user-select. This prevents text from\n    // being selected all over the page.\n    addUserSelectStyles(this);\n\n    // Initiate dragging. Set the current x and y as offsets\n    // so we know how much we've moved during the drag. This allows us\n    // to drag elements around even if they have been moved, without issue.\n    this.setState({\n      dragging: true,\n      offsetX: dragPoint.clientX - this.state.clientX,\n      offsetY: dragPoint.clientY - this.state.clientY\n    });\n\n\n    // Add event handlers\n    addEvent(document, dragEventFor['move'], this.handleDrag);\n    addEvent(document, dragEventFor['end'], this.handleDragEnd);\n  },\n\n  handleDragEnd: function (e) {\n    // Short circuit if not currently dragging\n    if (!this.state.dragging) {\n      return;\n    }\n\n    removeUserSelectStyles(this);\n\n    // Turn off dragging\n    this.setState({\n      dragging: false\n    });\n\n    // Call event handler\n    this.props.onStop(e, createUIEvent(this));\n\n    // Remove event handlers\n    removeEvent(document, dragEventFor['move'], this.handleDrag);\n    removeEvent(document, dragEventFor['end'], this.handleDragEnd);\n  },\n\n  handleDrag: function (e) {\n    var dragPoint = getControlPosition(e);\n\n    // Calculate X and Y\n    var clientX = dragPoint.clientX - this.state.offsetX;\n    var clientY = dragPoint.clientY - this.state.offsetY;\n\n    // Snap to grid if prop has been provided\n    if (Array.isArray(this.props.grid)) {\n      var coords = snapToGrid(this.props.grid, clientX, clientY);\n      clientX = coords[0], clientY = coords[1];\n    }\n\n    if (this.props.bounds) {\n      var pos = getBoundPosition(this, clientX, clientY);\n      clientX = pos[0], clientY = pos[1];\n    }\n\n    // Call event handler. If it returns explicit false, cancel.\n    var shouldUpdate = this.props.onDrag(e, createUIEvent(this));\n    if (shouldUpdate === false) return this.handleDragEnd();\n\n    // Update transform\n    this.setState({\n      clientX: clientX,\n      clientY: clientY\n    });\n  },\n\n  onMouseDown: function(ev) {\n    // Prevent 'ghost click' which happens 300ms after touchstart if the event isn't cancelled.\n    // We don't cancel the event on touchstart because of #37; we might want to make a scrollable item draggable.\n    // More on ghost clicks: http://ariatemplates.com/blog/2014/05/ghost-clicks-in-mobile-browsers/\n    if (dragEventFor == eventsFor['touch']) {\n      return ev.preventDefault();\n    }\n\n    return this.handleDragStart.apply(this, arguments);\n  },\n\n  onTouchStart: function(ev) {\n    // We're on a touch device now, so change the event handlers\n    dragEventFor = eventsFor['touch'];\n\n    return this.handleDragStart.apply(this, arguments);\n  },\n\n  // Intended for use by a parent component. Resets internal state on this component. Useful for\n  // <Resizable> and other components in case this element is manually resized and start/moveOnStartChange\n  // don't work for you.\n  resetState: function() {\n    this.setState({\n      offsetX: 0, offsetY: 0, clientX: 0, clientY: 0\n    });\n  },\n\n  render: function () {\n    // Create style object. We extend from existing styles so we don't\n    // remove anything already set (like background, color, etc).\n    var childStyle = this.props.children.props.style || {};\n\n    // Add a CSS transform to move the element around. This allows us to move the element around\n    // without worrying about whether or not it is relatively or absolutely positioned.\n    // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n    // has a clean slate.\n    var transform = createCSSTransform({\n      // Set left if horizontal drag is enabled\n      x: canDragX(this) ?\n        this.state.clientX :\n        0,\n\n      // Set top if vertical drag is enabled\n      y: canDragY(this) ?\n        this.state.clientY :\n        0\n    });\n\n    // Workaround IE pointer events; see #51\n    // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278\n    var touchHacks = {\n      touchAction: 'none'\n    };\n\n    var style = assign({}, childStyle, transform, touchHacks);\n\n    // Set zIndex if currently dragging and prop has been provided\n    if (this.state.dragging && !isNaN(this.props.zIndex)) {\n      style.zIndex = this.props.zIndex;\n    }\n\n    var className = classNames((this.props.children.props.className || ''), 'react-draggable', {\n      'react-draggable-dragging': this.state.dragging,\n      'react-draggable-dragged': this.state.dragged\n    });\n\n    // Reuse the child provided\n    // This makes it flexible to use whatever element is wanted (div, ul, etc)\n    return React.cloneElement(React.Children.only(this.props.children), {\n      style: style,\n      className: className,\n\n      onMouseDown: this.onMouseDown,\n      onTouchStart: this.onTouchStart,\n      onMouseUp: this.handleDragEnd,\n      onTouchEnd: this.handleDragEnd\n    });\n  }\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/lib/draggable.js\n ** module id = 17\n ** module chunks = 0\n **/","/*!\n  Copyright (c) 2015 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\nfunction classNames() {\n\tvar classes = '';\n\tvar arg;\n\n\tfor (var i = 0; i < arguments.length; i++) {\n\t\targ = arguments[i];\n\t\tif (!arg) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ('string' === typeof arg || 'number' === typeof arg) {\n\t\t\tclasses += ' ' + arg;\n\t\t} else if (Object.prototype.toString.call(arg) === '[object Array]') {\n\t\t\tclasses += ' ' + classNames.apply(null, arg);\n\t\t} else if ('object' === typeof arg) {\n\t\t\tfor (var key in arg) {\n\t\t\t\tif (!arg.hasOwnProperty(key) || !arg[key]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tclasses += ' ' + key;\n\t\t\t}\n\t\t}\n\t}\n\treturn classes.substr(1);\n}\n\n// safely export classNames for node / browserify\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = classNames;\n}\n\n// safely export classNames for RequireJS\nif (typeof define !== 'undefined' && define.amd) {\n\tdefine('classnames', [], function() {\n\t\treturn classNames;\n\t});\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/~/classnames/index.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\n\nvar _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };\n\nvar _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar React = require('react');\nvar Resizable = require('./Resizable');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\n\n// An example use of Resizable.\nvar ResizableBox = module.exports = React.createClass({\n  displayName: 'ResizableBox',\n  mixins: [PureRenderMixin],\n\n  propTypes: {\n    lockAspectRatio: React.PropTypes.bool\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      lockAspectRatio: false,\n      handleSize: [20, 20],\n      minConstraints: [20, 20]\n    };\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      width: this.props.width,\n      height: this.props.height,\n      aspectRatio: this.props.width / this.props.height\n    };\n  },\n\n  onResize: function onResize(event, _ref) {\n    var element = _ref.element;\n    var size = _ref.size;\n    var width = size.width;\n    var height = size.height;\n\n    var widthChanged = width !== this.state.width,\n        heightChanged = height !== this.state.height;\n    if (!widthChanged && !heightChanged) {\n      return;\n    }if (this.props.lockAspectRatio) {\n      var _preserveAspectRatio = this.preserveAspectRatio(width, height);\n\n      var _preserveAspectRatio2 = _slicedToArray(_preserveAspectRatio, 2);\n\n      width = _preserveAspectRatio2[0];\n      height = _preserveAspectRatio2[1];\n    }\n\n    this.setState({\n      width: width,\n      height: height\n    });\n  },\n\n  // If you do this, be careful of constraints\n  preserveAspectRatio: function preserveAspectRatio(width, height) {\n    var min = this.props.minConstraints;\n    var max = this.props.maxConstraints;\n\n    height = width / this.state.aspectRatio;\n    width = height * this.state.aspectRatio;\n\n    if (min) {\n      width = Math.max(min[0], width);\n      height = Math.max(min[1], height);\n    }\n    if (max) {\n      width = Math.min(max[0], width);\n      height = Math.min(max[1], height);\n    }\n    return [width, height];\n  },\n\n  render: function render() {\n    // Basic wrapper around a Resizable instance.\n    // If you use Resizable directly, you are responsible for updating the component\n    // with a new width and height.\n    var _props = this.props;\n    var handleSize = _props.handleSize;\n    var minConstraints = _props.minConstraints;\n    var maxConstraints = _props.maxConstraints;\n\n    var props = _objectWithoutProperties(_props, ['handleSize', 'minConstraints', 'maxConstraints']);\n\n    return React.createElement(\n      Resizable,\n      {\n        minConstraints: minConstraints,\n        maxConstraints: maxConstraints,\n        handleSize: handleSize,\n        width: this.state.width,\n        height: this.state.height,\n        onResize: this.onResize,\n        draggableOpts: this.props.draggableOpts\n      },\n      React.createElement(\n        'div',\n        _extends({ style: { width: this.state.width + 'px', height: this.state.height + 'px' } }, props),\n        this.props.children\n      )\n    );\n  }\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/build/ResizableBox.js\n ** module id = 19\n ** module chunks = 0\n **/","'use strict';\nmodule.exports = function() {\n  throw new Error(\"Don't instantiate Resizable directly! Use require('react-resizable').Resizable\");\n};\n\nmodule.exports.Resizable = require('./build/Resizable');\nmodule.exports.ResizableBox = require('./build/ResizableBox');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/index.js\n ** module id = 20\n ** module chunks = 0\n **/","'use strict';\n\nvar React = require('react');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\nvar emptyFunction = require('react/lib/emptyFunction');\nvar cloneWithProps = require('react/lib/cloneWithProps');\n\nfunction createUIEvent(draggable) {\n\treturn {\n\t\telement: draggable.getDOMNode(),\n\t\tposition: {\n\t\t\ttop: (draggable._pendingState || draggable.state).clientY,\n\t\t\tleft: (draggable._pendingState || draggable.state).clientX\n\t\t}\n\t};\n}\n\nfunction canDragY(draggable) {\n\treturn draggable.props.axis === 'both' ||\n\t\t\tdraggable.props.axis === 'y';\n}\n\nfunction canDragX(draggable) {\n\treturn draggable.props.axis === 'both' ||\n\t\t\tdraggable.props.axis === 'x';\n}\n\nfunction isFunction(func) {\n  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n}\n\n// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\nfunction findInArray(array, callback) {\n  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {\n    if (callback.apply(callback, [element, i, array])) return element;\n  }\n}\n\nfunction matchesSelector(el, selector) {\n  var method = findInArray([\n    'matches',\n    'webkitMatchesSelector',\n    'mozMatchesSelector',\n    'msMatchesSelector',\n    'oMatchesSelector'\n  ], function(method){\n    return isFunction(el[method]);\n  });\n\n  return el[method].call(el, selector);\n}\n\nfunction positionToCSSTransform(style) {\n\t// Replace unitless items with px\n\tvar x = ('' + style.left).replace(/(\\d)$/, '$1px');\n\tvar y = ('' + style.top).replace(/(\\d)$/, '$1px');\n\tstyle.transform = 'translate(' + x + ',' + y + ')';\n\tstyle.WebkitTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.OTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.msTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.MozTransform = 'translate(' + x + ',' + y + ')';\n\tdelete style.left;\n\tdelete style.top;\n\treturn style;\n}\n\n// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886\n/* Conditional to fix node server side rendering of component */\nif (typeof window === 'undefined') {\n    // Do Node Stuff\n    var isTouchDevice = false;\n} else {\n    // Do Browser Stuff\n    var isTouchDevice = 'ontouchstart' in window || // works on most browsers\n      'onmsgesturechange' in window; // works on ie10 on ms surface\n}\n\n// look ::handleDragStart\n//function isMultiTouch(e) {\n//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1\n//}\n\n/**\n * simple abstraction for dragging events names\n * */\nvar dragEventFor = (function () {\n  var eventsFor = {\n    touch: {\n      start: 'touchstart',\n      move: 'touchmove',\n      end: 'touchend'\n    },\n    mouse: {\n      start: 'mousedown',\n      move: 'mousemove',\n      end: 'mouseup'\n    }\n  };\n  return eventsFor[isTouchDevice ? 'touch' : 'mouse'];\n})();\n\n/**\n * get {clientX, clientY} positions of control\n * */\nfunction getControlPosition(e) {\n  var position = (e.touches && e.touches[0]) || e;\n  return {\n    clientX: position.clientX,\n    clientY: position.clientY\n  };\n}\n\nfunction addEvent(el, event, handler) {\n\tif (!el) { return; }\n\tif (el.attachEvent) {\n\t\tel.attachEvent('on' + event, handler);\n\t} else if (el.addEventListener) {\n\t\tel.addEventListener(event, handler, true);\n\t} else {\n\t\tel['on' + event] = handler;\n\t}\n}\n\nfunction removeEvent(el, event, handler) {\n\tif (!el) { return; }\n\tif (el.detachEvent) {\n\t\tel.detachEvent('on' + event, handler);\n\t} else if (el.removeEventListener) {\n\t\tel.removeEventListener(event, handler, true);\n\t} else {\n\t\tel['on' + event] = null;\n\t}\n}\n\nmodule.exports = React.createClass({\n\tdisplayName: 'Draggable',\n\tmixins: [PureRenderMixin],\n\n\tpropTypes: {\n\t\t/**\n\t\t * `axis` determines which axis the draggable can move.\n\t\t *\n\t\t * 'both' allows movement horizontally and vertically.\n\t\t * 'x' limits movement to horizontal axis.\n\t\t * 'y' limits movement to vertical axis.\n\t\t *\n\t\t * Defaults to 'both'.\n\t\t */\n\t\taxis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\n\t\t/**\n\t\t * `handle` specifies a selector to be used as the handle that initiates drag.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t    \treturn (\n\t\t * \t    \t \t<Draggable handle=\".handle\">\n\t\t * \t    \t \t  <div>\n\t\t * \t    \t \t      <div className=\"handle\">Click me to drag</div>\n\t\t * \t    \t \t      <div>This is some other content</div>\n\t\t * \t    \t \t  </div>\n\t\t * \t    \t\t</Draggable>\n\t\t * \t    \t);\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\thandle: React.PropTypes.string,\n\n\t\t/**\n\t\t * `cancel` specifies a selector to be used to prevent drag initialization.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return(\n\t\t * \t            <Draggable cancel=\".cancel\">\n\t\t * \t                <div>\n\t\t * \t                \t<div className=\"cancel\">You can't drag from here</div>\n\t\t *\t\t\t\t\t\t<div>Dragging here works fine</div>\n\t\t * \t                </div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tcancel: React.PropTypes.string,\n\n\t\t/**\n\t\t * `grid` specifies the x and y that dragging should snap to.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable grid={[25, 25]}>\n\t\t * \t                <div>I snap to a 25 x 25 grid</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tgrid: React.PropTypes.arrayOf(React.PropTypes.number),\n\n\t\t/**\n\t\t * `start` specifies the x and y that the dragged item should start at\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable start={{x: 25, y: 25}}>\n\t\t * \t                <div>I start with left: 25px; top: 25px;</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tstart: React.PropTypes.object,\n\n\t\t/**\n\t\t * `moveOnStartChange` tells the Draggable element to reset its position\n\t\t * if the `start` parameters are changed. By default, if the `start` \n\t\t * parameters change, the Draggable element still remains where it started\n\t\t * or was dragged to.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t\t\tonButtonClick: function () {\n\t\t * \t\t\t\tthis.setState({clicked: true});\n\t\t * \t\t\t},\n\t\t * \t    render: function () {\n\t\t * \t    \t\tvar start = this.state.clicked ?\n\t\t * \t    \t\t  {x: 25, y: 25} :\n\t\t * \t    \t\t  {x: 125, y: 125};\n\t\t * \t        return (\n\t\t * \t            <Draggable start={start}>\n\t\t * \t                <div>I start with left: 25px; top: 25px;,\n\t\t * \t                but move to left: 125px; top: 125px; when the button\n\t\t * \t                is clicked.</div>\n\t\t * \t                <div onClick={this.onButtonClick}>Button</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tmoveOnStartChange: React.PropTypes.bool,\n\n\t\t/**\n\t\t * `useCSSTransforms` if true will place the element using translate(x, y)\n\t\t * rather than CSS top/left.\n\t\t *\n\t\t * This generally gives better performance, and is useful in combination with\n\t\t * other layout systems that use translate(), such as react-grid-layout.\n\t\t */\n\t\tuseCSSTransforms: React.PropTypes.bool,\n\n\t\t/**\n\t\t * `zIndex` specifies the zIndex to use while dragging.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable zIndex={100}>\n\t\t * \t                <div>I have a zIndex</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tzIndex: React.PropTypes.number,\n\n\t\t/**\n\t\t * Called when dragging starts.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonStart: React.PropTypes.func,\n\n\t\t/**\n\t\t * Called while dragging.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonDrag: React.PropTypes.func,\n\n\t\t/**\n\t\t * Called when dragging stops.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonStop: React.PropTypes.func,\n\n\t\t/**\n\t\t * A workaround option which can be passed if onMouseDown needs to be accessed, \n\t\t * since it'll always be blocked (due to that there's internal use of onMouseDown)\n\t\t *\n\t\t */\n\t\tonMouseDown: React.PropTypes.func\n\t},\n\n\tcomponentWillUnmount: function() {\n\t\t// Remove any leftover event handlers\n\t\tremoveEvent(window, dragEventFor['move'], this.handleDrag);\n\t\tremoveEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\tcomponentWillReceiveProps: function(nextProps) {\n\t\t// If this is set to watch a changing start position, \n\t\t// set x and y to the new position.\n\t\tif (nextProps.moveOnStartChange) {\n\t\t\tthis.setState({\n\t\t\t\tclientX: nextProps.start.x,\n\t\t\t\tclientY: nextProps.start.y\n\t\t\t});\n\t\t}\n\t},\n\n\tgetDefaultProps: function () {\n\t\treturn {\n\t\t\taxis: 'both',\n\t\t\thandle: null,\n\t\t\tcancel: null,\n\t\t\tgrid: null,\n\t\t\tstart: {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0\n\t\t\t},\n\t\t\tmoveOnStartChange: false,\n\t\t\tuseCSSTransforms: false,\n\t\t\tzIndex: NaN,\n\t\t\tonStart: emptyFunction,\n\t\t\tonDrag: emptyFunction,\n\t\t\tonStop: emptyFunction,\n\t\t\tonMouseDown: emptyFunction\n\t\t};\n\t},\n\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\t// Whether or not currently dragging\n\t\t\tdragging: false,\n\n\t\t\t// Start top/left of this.getDOMNode()\n\t\t\tstartX: 0, startY: 0,\n\n\t\t\t// Offset between start top/left and mouse top/left\n\t\t\toffsetX: 0, offsetY: 0,\n\n\t\t\t// Current top/left of this.getDOMNode()\n\t\t\tclientX: this.props.start.x, clientY: this.props.start.y\n\t\t};\n\t},\n\n\thandleDragStart: function (e) {\n    // todo: write right implementation to prevent multitouch drag\n    // prevent multi-touch events\n    // if (isMultiTouch(e)) {\n    //     this.handleDragEnd.apply(e, arguments);\n    //     return\n    // }\n\n\t\t// Make it possible to attach event handlers on top of this one\n\t\tthis.props.onMouseDown(e);\n\n\t\t// Only catch left clicks, if clicking\n\t\tif (typeof e.button === \"number\" && e.button !== 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar node = this.getDOMNode();\n\n\t\t// Short circuit if handle or cancel prop was provided and selector doesn't match\n\t\tif ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n\t\t\t(this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n\t\t\treturn;\n\t\t}\n\n    var dragPoint = getControlPosition(e);\n\n\t\t// Initiate dragging\n\t\tthis.setState({\n\t\t\tdragging: true,\n\t\t\toffsetX: parseInt(dragPoint.clientX, 10),\n\t\t\toffsetY: parseInt(dragPoint.clientY, 10),\n\t\t\tstartX: parseInt(this.state.clientX, 10) || 0,\n\t\t\tstartY: parseInt(this.state.clientY, 10) || 0\n\t\t});\n\n\t\t// Add a class to the body to disable user-select. This prevents text from \n\t\t// being selected all over the page.\n\t\tdocument.body.className += \" react-draggable-active\";\n\n\t\t// Call event handler\n\t\tthis.props.onStart(e, createUIEvent(this));\n\n\t\t// Add event handlers\n\t\taddEvent(window, dragEventFor['move'], this.handleDrag);\n\t\taddEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\thandleDragEnd: function (e) {\n\t\t// Short circuit if not currently dragging\n\t\tif (!this.state.dragging) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Turn off dragging\n\t\tthis.setState({\n\t\t\tdragging: false\n\t\t});\n\n\t\t// Remove the body class used to disable user-select.\n\t\tdocument.body.className = document.body.className.replace(\" react-draggable-active\", \"\");\n\n\t\t// Call event handler\n\t\tthis.props.onStop(e, createUIEvent(this));\n\n\t\t// Remove event handlers\n    removeEvent(window, dragEventFor['move'], this.handleDrag);\n    removeEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\thandleDrag: function (e) {\n    var dragPoint = getControlPosition(e);\n\n\t\t// Calculate top and left\n    var clientX = (this.state.startX + (dragPoint.clientX - this.state.offsetX));\n    var clientY = (this.state.startY + (dragPoint.clientY - this.state.offsetY));\n\n\t\t// Snap to grid if prop has been provided\n\t\tif (Array.isArray(this.props.grid)) {\n\t\t\tvar directionX = clientX < parseInt(this.state.clientX, 10) ? -1 : 1;\n\t\t\tvar directionY = clientY < parseInt(this.state.clientY, 10) ? -1 : 1;\n\n\t\t\tclientX = Math.abs(clientX - parseInt(this.state.clientX, 10)) >= this.props.grid[0]\n\t\t\t\t\t? (parseInt(this.state.clientX, 10) + (this.props.grid[0] * directionX))\n\t\t\t\t\t: parseInt(this.state.clientX, 10);\n\n\t\t\tclientY = Math.abs(clientY - parseInt(this.state.clientY, 10)) >= this.props.grid[1]\n\t\t\t\t\t? (parseInt(this.state.clientY, 10) + (this.props.grid[1] * directionY))\n\t\t\t\t\t: parseInt(this.state.clientY, 10);\n\t\t}\n\n\t\t// Min/max constraints\n\t\tif (Array.isArray(this.props.minConstraints)) {\n\t\t\tclientX = Math.max(this.props.minConstraints[0], clientX);\n\t\t\tclientY = Math.max(this.props.minConstraints[1], clientY);\n\t\t}\n\t\tif (Array.isArray(this.props.maxConstraints)) {\n\t\t\tclientX = Math.min(this.props.maxConstraints[0], clientX);\n\t\t\tclientY = Math.min(this.props.maxConstraints[1], clientY);\n\t\t}\n\n\t\t// Update top and left\n\t\tthis.setState({\n\t\t\tclientX: clientX,\n\t\t\tclientY: clientY\n\t\t});\n\n\t\t// Call event handler\n\t\tthis.props.onDrag(e, createUIEvent(this));\n\t},\n\n\trender: function () {\n\t\tvar style = {\n\t\t\t// Set top if vertical drag is enabled\n\t\t\ttop: canDragY(this)\n\t\t\t\t? this.state.clientY\n\t\t\t\t: this.state.startY,\n\n\t\t\t// Set left if horizontal drag is enabled\n\t\t\tleft: canDragX(this)\n\t\t\t\t? this.state.clientX\n\t\t\t\t: this.state.startX\n\t\t};\n\n\t\tif (this.props.useCSSTransforms) {\n\t\t\tstyle = positionToCSSTransform(style);\n\t\t}\n\n\t\t// Set zIndex if currently dragging and prop has been provided\n\t\tif (this.state.dragging && !isNaN(this.props.zIndex)) {\n\t\t\tstyle.zIndex = this.props.zIndex;\n\t\t}\n\n\t\t// Reuse the child provided\n\t\t// This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t\treturn cloneWithProps(React.Children.only(this.props.children), {\n\t\t\tstyle: style,\n\t\t\tclassName: 'react-draggable' + (this.state.dragging ? ' react-draggable-dragging' : ''),\n\n\t\t\tonMouseDown: this.handleDragStart,\n\t\t\tonTouchStart: function(ev){\n        ev.preventDefault(); // prevent for scroll\n        return this.handleDragStart.apply(this, arguments);\n      }.bind(this),\n\n\t\t\tonMouseUp: this.handleDragEnd,\n\t\t\tonTouchEnd: this.handleDragEnd\n\t\t});\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/~/react-draggable/lib/draggable.js\n ** module id = 22\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule emptyFunction\n */\n\nfunction makeEmptyFunction(arg) {\n  return function() {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nfunction emptyFunction() {}\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function() { return this; };\nemptyFunction.thatReturnsArgument = function(arg) { return arg; };\n\nmodule.exports = emptyFunction;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/emptyFunction.js\n ** module id = 23\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shallowEqual\n */\n\n'use strict';\n\n/**\n * Performs equality by iterating through keys on an object and returning\n * false when any key has values which are not strictly equal between\n * objA and objB. Returns true when the values of all keys are strictly equal.\n *\n * @return {boolean}\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n  var key;\n  // Test for A's keys different from B.\n  for (key in objA) {\n    if (objA.hasOwnProperty(key) &&\n        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n      return false;\n    }\n  }\n  // Test for B's keys missing from A.\n  for (key in objB) {\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = shallowEqual;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/shallowEqual.js\n ** module id = 24\n ** module chunks = 0\n **/","module.exports = require('./lib/draggable');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/index.js\n ** module id = 16\n ** module chunks = 0\n **/"],"sourceRoot":""}